(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '    <ul>                <li data-name="namespace:Devise" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise.html">Devise</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Devise_Calendar" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Calendar.html">Calendar</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Calendar_CalendarResponseHandler" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Calendar/CalendarResponseHandler.html">CalendarResponseHandler</a>                    </div>                </li>                            <li data-name="class:Devise_Calendar_PageVersionSource" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Calendar/PageVersionSource.html">PageVersionSource</a>                    </div>                </li>                            <li data-name="class:Devise_Calendar_Source" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Calendar/Source.html">Source</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Languages" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Languages.html">Languages</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Languages_LanguageDetector" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Languages/LanguageDetector.html">LanguageDetector</a>                    </div>                </li>                            <li data-name="class:Devise_Languages_LanguagesManager" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Languages/LanguagesManager.html">LanguagesManager</a>                    </div>                </li>                            <li data-name="class:Devise_Languages_LanguagesRepository" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Languages/LanguagesRepository.html">LanguagesRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Languages_LanguagesResponseHandler" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Languages/LanguagesResponseHandler.html">LanguagesResponseHandler</a>                    </div>                </li>                            <li data-name="class:Devise_Languages_LocaleDetector" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Languages/LocaleDetector.html">LocaleDetector</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Media" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Media.html">Media</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Devise_Media_Categories" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Media/Categories.html">Categories</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Media_Categories_CategoryAlreadyExistsException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Categories/CategoryAlreadyExistsException.html">CategoryAlreadyExistsException</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Categories_CategoryPaths" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Categories/CategoryPaths.html">CategoryPaths</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Categories_Manager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Categories/Manager.html">Manager</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Categories_ResponseHandler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Categories/ResponseHandler.html">ResponseHandler</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Media_Encoding" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Media/Encoding.html">Encoding</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Media_Encoding_EncodingServiceProvider" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Encoding/EncodingServiceProvider.html">EncodingServiceProvider</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Encoding_InvalidEncodingSettingsException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Encoding/InvalidEncodingSettingsException.html">InvalidEncodingSettingsException</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Encoding_ZencoderJob" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Encoding/ZencoderJob.html">ZencoderJob</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Encoding_ZencoderNotificationsController" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Encoding/ZencoderNotificationsController.html">ZencoderNotificationsController</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Media_Files" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Media/Files.html">Files</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Media_Files_FileDownloader" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Files/FileDownloader.html">FileDownloader</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Files_Filesystem" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Files/Filesystem.html">Filesystem</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Files_InvalidFileException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Files/InvalidFileException.html">InvalidFileException</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Files_Manager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Files/Manager.html">Manager</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Files_Repository" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Files/Repository.html">Repository</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Files_ResponseHandler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Files/ResponseHandler.html">ResponseHandler</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Media_Images" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Media/Images.html">Images</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Media_Images_Images" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Images/Images.html">Images</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Images_Manager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Images/Manager.html">Manager</a>                    </div>                </li>                            <li data-name="class:Devise_Media_Images_ResponseHandler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Media/Images/ResponseHandler.html">ResponseHandler</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Devise_Media_MediaPaths" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Media/MediaPaths.html">MediaPaths</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Menus" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Menus.html">Menus</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Menus_MenuCache" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Menus/MenuCache.html">MenuCache</a>                    </div>                </li>                            <li data-name="class:Devise_Menus_MenusManager" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Menus/MenusManager.html">MenusManager</a>                    </div>                </li>                            <li data-name="class:Devise_Menus_MenusRepository" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Menus/MenusRepository.html">MenusRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Menus_MenusResponseHandler" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Menus/MenusResponseHandler.html">MenusResponseHandler</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href=".html">Models</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Devise_Models_Scaffolding" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Models/Scaffolding.html">Scaffolding</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Devise_Models_Scaffolding_Types" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Models/Scaffolding/Types.html">Types</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Models_Scaffolding_Types_BaseScaffolding" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Models/Scaffolding/Types/BaseScaffolding.html">BaseScaffolding</a>                    </div>                </li>                            <li data-name="class:Devise_Models_Scaffolding_Types_CrudScaffolding" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Models/Scaffolding/Types/CrudScaffolding.html">CrudScaffolding</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Devise_Models_Scaffolding_MigrationScaffolding" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Models/Scaffolding/MigrationScaffolding.html">MigrationScaffolding</a>                    </div>                </li>                            <li data-name="class:Devise_Models_Scaffolding_SanityChecksHelper" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Models/Scaffolding/SanityChecksHelper.html">SanityChecksHelper</a>                    </div>                </li>                            <li data-name="class:Devise_Models_Scaffolding_ScaffoldingManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Models/Scaffolding/ScaffoldingManager.html">ScaffoldingManager</a>                    </div>                </li>                            <li data-name="class:Devise_Models_Scaffolding_ScaffoldingRepository" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Models/Scaffolding/ScaffoldingRepository.html">ScaffoldingRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Models_Scaffolding_ScaffoldingResponseHandler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Models/Scaffolding/ScaffoldingResponseHandler.html">ScaffoldingResponseHandler</a>                    </div>                </li>                            <li data-name="class:Devise_Models_Scaffolding_SeederScaffolding" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Models/Scaffolding/SeederScaffolding.html">SeederScaffolding</a>                    </div>                </li>                            <li data-name="class:Devise_Models_Scaffolding_TemplateScaffolding" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Models/Scaffolding/TemplateScaffolding.html">TemplateScaffolding</a>                    </div>                </li>                </ul></div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Pages" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Pages.html">Pages</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Devise_Pages_Collections" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Pages/Collections.html">Collections</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Pages_Collections_CollectionFields" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Collections/CollectionFields.html">CollectionFields</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Collections_CollectionFieldsFactory" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Collections/CollectionFieldsFactory.html">CollectionFieldsFactory</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Collections_CollectionsManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Collections/CollectionsManager.html">CollectionsManager</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Collections_CollectionsRepository" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Collections/CollectionsRepository.html">CollectionsRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Collections_ResponseHandler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Collections/ResponseHandler.html">ResponseHandler</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Pages_Docs" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Pages/Docs.html">Docs</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Pages_Docs_Creator" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Docs/Creator.html">Creator</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Docs_LiveSpan" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Docs/LiveSpan.html">LiveSpan</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Pages_Fields" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Pages/Fields.html">Fields</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Devise_Pages_Fields_Handlers" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Pages/Fields/Handlers.html">Handlers</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Pages_Fields_Handlers_AudioFieldUpdated" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Fields/Handlers/AudioFieldUpdated.html">AudioFieldUpdated</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Fields_Handlers_ImageFieldUpdated" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Fields/Handlers/ImageFieldUpdated.html">ImageFieldUpdated</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Fields_Handlers_VideoFieldUpdated" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Fields/Handlers/VideoFieldUpdated.html">VideoFieldUpdated</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Devise_Pages_Fields_DuplicateFieldKeyException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Fields/DuplicateFieldKeyException.html">DuplicateFieldKeyException</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Fields_DvsMagicMode" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Fields/DvsMagicMode.html">DvsMagicMode</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Fields_FieldManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Fields/FieldManager.html">FieldManager</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Fields_FieldValue" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Fields/FieldValue.html">FieldValue</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Fields_FieldsRepository" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Fields/FieldsRepository.html">FieldsRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Fields_FieldsResponseHandler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Fields/FieldsResponseHandler.html">FieldsResponseHandler</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Fields_LiveFieldValue" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Fields/LiveFieldValue.html">LiveFieldValue</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Pages_Interpreter" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Pages/Interpreter.html">Interpreter</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Devise_Pages_Interpreter_Exceptions" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Pages/Interpreter/Exceptions.html">Exceptions</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Pages_Interpreter_Exceptions_DuplicateDeviseKeyException" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/Exceptions/DuplicateDeviseKeyException.html">DuplicateDeviseKeyException</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_Exceptions_InvalidDeviseKeyException" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/Exceptions/InvalidDeviseKeyException.html">InvalidDeviseKeyException</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_Exceptions_InvalidDeviseTagException" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/Exceptions/InvalidDeviseTagException.html">InvalidDeviseTagException</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_Exceptions_InvalidModelMappingException" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/Exceptions/InvalidModelMappingException.html">InvalidModelMappingException</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_Exceptions_PageDataNotInitializedException" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/Exceptions/PageDataNotInitializedException.html">PageDataNotInitializedException</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Pages_Interpreter_Modifiers" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Pages/Interpreter/Modifiers.html">Modifiers</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Pages_Interpreter_Modifiers_AddPlaceHolderTags" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/Modifiers/AddPlaceHolderTags.html">AddPlaceHolderTags</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_Modifiers_CreatePristineSection" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/Modifiers/CreatePristineSection.html">CreatePristineSection</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_Modifiers_EchoDeviseMagic" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/Modifiers/EchoDeviseMagic.html">EchoDeviseMagic</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_Modifiers_RegisterDeviseTags" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/Modifiers/RegisterDeviseTags.html">RegisterDeviseTags</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_BladeEngineCompiler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/BladeEngineCompiler.html">BladeEngineCompiler</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_DeviseCompiler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/DeviseCompiler.html">DeviseCompiler</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_DeviseParser" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/DeviseParser.html">DeviseParser</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_DeviseTag" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/DeviseTag.html">DeviseTag</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_DvsPageData" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/DvsPageData.html">DvsPageData</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_TagManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/TagManager.html">TagManager</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Interpreter_ViewOpener" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Interpreter/ViewOpener.html">ViewOpener</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Pages_Models" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Pages/Models.html">Models</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Pages_Models_ModelFieldValidationFailedException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Models/ModelFieldValidationFailedException.html">ModelFieldValidationFailedException</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Models_ModelManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Models/ModelManager.html">ModelManager</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Models_ModelsResponseHandler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Models/ModelsResponseHandler.html">ModelsResponseHandler</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Pages_Viewvars" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Pages/Viewvars.html">Viewvars</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Pages_Viewvars_DataBuilder" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Viewvars/DataBuilder.html">DataBuilder</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Viewvars_DataCrawler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Viewvars/DataCrawler.html">DataCrawler</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Viewvars_DeviseRouteConfigurationException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Viewvars/DeviseRouteConfigurationException.html">DeviseRouteConfigurationException</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_Viewvars_ViewvarComposer" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Pages/Viewvars/ViewvarComposer.html">ViewvarComposer</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Devise_Pages_ApiPagesManager" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/ApiPagesManager.html">ApiPagesManager</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_ApiPagesRepository" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/ApiPagesRepository.html">ApiPagesRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_ApiPagesResponseHandler" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/ApiPagesResponseHandler.html">ApiPagesResponseHandler</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_PageController" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/PageController.html">PageController</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_PageManager" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/PageManager.html">PageManager</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_PageNotFoundException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/PageNotFoundException.html">PageNotFoundException</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_PageResponseHandler" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/PageResponseHandler.html">PageResponseHandler</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_PageVersionManager" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/PageVersionManager.html">PageVersionManager</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_PageVersionsRepository" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/PageVersionsRepository.html">PageVersionsRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_PagesException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/PagesException.html">PagesException</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_PagesRepository" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/PagesRepository.html">PagesRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Pages_PagesServiceProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Pages/PagesServiceProvider.html">PagesServiceProvider</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Search" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Search.html">Search</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Search_PageSearch" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Search/PageSearch.html">PageSearch</a>                    </div>                </li>                            <li data-name="class:Devise_Search_Pagination" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Search/Pagination.html">Pagination</a>                    </div>                </li>                            <li data-name="class:Devise_Search_SearchableModelTrait" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Search/SearchableModelTrait.html">SearchableModelTrait</a>                    </div>                </li>                            <li data-name="class:Devise_Search_UniversalSearch" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Search/UniversalSearch.html">UniversalSearch</a>                    </div>                </li>                            <li data-name="class:Devise_Search_UniversalSearchProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Search/UniversalSearchProvider.html">UniversalSearchProvider</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Support" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Support.html">Support</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Devise_Support_Config" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Support/Config.html">Config</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Support_Config_EnvironmentFileManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Config/EnvironmentFileManager.html">EnvironmentFileManager</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Config_FileManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Config/FileManager.html">FileManager</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Config_Overrides" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Config/Overrides.html">Overrides</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Config_SettingsManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Config/SettingsManager.html">SettingsManager</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Config_SettingsRepository" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Config/SettingsRepository.html">SettingsRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Config_SettingsResponseHandler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Config/SettingsResponseHandler.html">SettingsResponseHandler</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Support_Console" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Support/Console.html">Console</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Support_Console_DeviseInstallCommand" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Console/DeviseInstallCommand.html">DeviseInstallCommand</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Console_DeviseMigrateCommand" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Console/DeviseMigrateCommand.html">DeviseMigrateCommand</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Console_DevisePublishAssetsCommand" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Console/DevisePublishAssetsCommand.html">DevisePublishAssetsCommand</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Console_DevisePublishConfigsCommand" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Console/DevisePublishConfigsCommand.html">DevisePublishConfigsCommand</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Console_DeviseResetCommand" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Console/DeviseResetCommand.html">DeviseResetCommand</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Console_DeviseSeedCommand" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Console/DeviseSeedCommand.html">DeviseSeedCommand</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Support_Installer" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Support/Installer.html">Installer</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Support_Installer_DatabaseCreator" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Installer/DatabaseCreator.html">DatabaseCreator</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Installer_InstallWizard" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Installer/InstallWizard.html">InstallWizard</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Installer_InstallerController" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Installer/InstallerController.html">InstallerController</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Support_Middleware" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Support/Middleware.html">Middleware</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Support_Middleware_VerifyCsrfToken" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Middleware/VerifyCsrfToken.html">VerifyCsrfToken</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Support_Sortable" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Support/Sortable.html">Sortable</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Support_Sortable_EloquentBuilder" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Sortable/EloquentBuilder.html">EloquentBuilder</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Sortable_Filter" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Sortable/Filter.html">Filter</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Sortable_Link" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Sortable/Link.html">Link</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Sortable_Manager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Sortable/Manager.html">Manager</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Sortable_Sort" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Sortable/Sort.html">Sort</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Sortable_Sortable" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Sortable/Sortable.html">Sortable</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Sortable_SortableFacade" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Sortable/SortableFacade.html">SortableFacade</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Sortable_SortableServiceProvider" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Support/Sortable/SortableServiceProvider.html">SortableServiceProvider</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Devise_Support_DeviseEloquentAddons" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Support/DeviseEloquentAddons.html">DeviseEloquentAddons</a>                    </div>                </li>                            <li data-name="class:Devise_Support_DeviseException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Support/DeviseException.html">DeviseException</a>                    </div>                </li>                            <li data-name="class:Devise_Support_DeviseHttpException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Support/DeviseHttpException.html">DeviseHttpException</a>                    </div>                </li>                            <li data-name="class:Devise_Support_DevisePaginator" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Support/DevisePaginator.html">DevisePaginator</a>                    </div>                </li>                            <li data-name="class:Devise_Support_DeviseResponse" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Support/DeviseResponse.html">DeviseResponse</a>                    </div>                </li>                            <li data-name="class:Devise_Support_DeviseSeeder" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Support/DeviseSeeder.html">DeviseSeeder</a>                    </div>                </li>                            <li data-name="class:Devise_Support_DeviseValidationException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Support/DeviseValidationException.html">DeviseValidationException</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Framework" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Support/Framework.html">Framework</a>                    </div>                </li>                            <li data-name="class:Devise_Support_Str" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Support/Str.html">Str</a>                    </div>                </li>                            <li data-name="class:Devise_Support_SupportServiceProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Support/SupportServiceProvider.html">SupportServiceProvider</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Templates" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Templates.html">Templates</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Templates_DeviseTemplateNotFoundException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Templates/DeviseTemplateNotFoundException.html">DeviseTemplateNotFoundException</a>                    </div>                </li>                            <li data-name="class:Devise_Templates_TemplatesManager" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Templates/TemplatesManager.html">TemplatesManager</a>                    </div>                </li>                            <li data-name="class:Devise_Templates_TemplatesRepository" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Templates/TemplatesRepository.html">TemplatesRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Templates_TemplatesResponseHandler" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Templates/TemplatesResponseHandler.html">TemplatesResponseHandler</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Users" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Users.html">Users</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:Devise_Users_Groups" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Users/Groups.html">Groups</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Users_Groups_GroupManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Users/Groups/GroupManager.html">GroupManager</a>                    </div>                </li>                            <li data-name="class:Devise_Users_Groups_GroupsRepository" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Users/Groups/GroupsRepository.html">GroupsRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Users_Groups_GroupsResponseHandler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Users/Groups/GroupsResponseHandler.html">GroupsResponseHandler</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Users_Permissions" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Users/Permissions.html">Permissions</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Users_Permissions_PermissionsManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Users/Permissions/PermissionsManager.html">PermissionsManager</a>                    </div>                </li>                            <li data-name="class:Devise_Users_Permissions_PermissionsRepository" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Users/Permissions/PermissionsRepository.html">PermissionsRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Users_Permissions_PermissionsResponseHandler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Users/Permissions/PermissionsResponseHandler.html">PermissionsResponseHandler</a>                    </div>                </li>                            <li data-name="class:Devise_Users_Permissions_RedirectHandler" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Users/Permissions/RedirectHandler.html">RedirectHandler</a>                    </div>                </li>                            <li data-name="class:Devise_Users_Permissions_RuleList" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Users/Permissions/RuleList.html">RuleList</a>                    </div>                </li>                            <li data-name="class:Devise_Users_Permissions_RuleManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Users/Permissions/RuleManager.html">RuleManager</a>                    </div>                </li>                            <li data-name="class:Devise_Users_Permissions_RuleManagerFacade" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Users/Permissions/RuleManagerFacade.html">RuleManagerFacade</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Devise_Users_Sessions" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Devise/Users/Sessions.html">Sessions</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:Devise_Users_Sessions_SessionsRepository" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Devise/Users/Sessions/SessionsRepository.html">SessionsRepository</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Devise_Users_DeviseUser" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Users/DeviseUser.html">DeviseUser</a>                    </div>                </li>                            <li data-name="class:Devise_Users_DeviseUserController" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Users/DeviseUserController.html">DeviseUserController</a>                    </div>                </li>                            <li data-name="class:Devise_Users_UserHelper" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Users/UserHelper.html">UserHelper</a>                    </div>                </li>                            <li data-name="class:Devise_Users_UserManager" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Users/UserManager.html">UserManager</a>                    </div>                </li>                            <li data-name="class:Devise_Users_UserServiceProvider" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Users/UserServiceProvider.html">UserServiceProvider</a>                    </div>                </li>                            <li data-name="class:Devise_Users_UsersRepository" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Users/UsersRepository.html">UsersRepository</a>                    </div>                </li>                            <li data-name="class:Devise_Users_UsersResponseHandler" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Devise/Users/UsersResponseHandler.html">UsersResponseHandler</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Devise_DeviseServiceProvider" class="opened">                    <div style="padding-left:26px" class="hd leaf">                        <a href="Devise/DeviseServiceProvider.html">DeviseServiceProvider</a>                    </div>                </li>                </ul></div>                </li>                </ul>';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
                    {"type": "Namespace", "link": "Devise.html", "name": "Devise", "doc": "Namespace Devise"},{"type": "Namespace", "link": "Devise/Calendar.html", "name": "Devise\\Calendar", "doc": "Namespace Devise\\Calendar"},{"type": "Namespace", "link": "Devise/Languages.html", "name": "Devise\\Languages", "doc": "Namespace Devise\\Languages"},{"type": "Namespace", "link": "Devise/Media.html", "name": "Devise\\Media", "doc": "Namespace Devise\\Media"},{"type": "Namespace", "link": "Devise/Media/Categories.html", "name": "Devise\\Media\\Categories", "doc": "Namespace Devise\\Media\\Categories"},{"type": "Namespace", "link": "Devise/Media/Encoding.html", "name": "Devise\\Media\\Encoding", "doc": "Namespace Devise\\Media\\Encoding"},{"type": "Namespace", "link": "Devise/Media/Files.html", "name": "Devise\\Media\\Files", "doc": "Namespace Devise\\Media\\Files"},{"type": "Namespace", "link": "Devise/Media/Images.html", "name": "Devise\\Media\\Images", "doc": "Namespace Devise\\Media\\Images"},{"type": "Namespace", "link": "Devise/Menus.html", "name": "Devise\\Menus", "doc": "Namespace Devise\\Menus"},{"type": "Namespace", "link": "Devise/Models.html", "name": "Devise\\Models", "doc": "Namespace Devise\\Models"},{"type": "Namespace", "link": "Devise/Models/Scaffolding.html", "name": "Devise\\Models\\Scaffolding", "doc": "Namespace Devise\\Models\\Scaffolding"},{"type": "Namespace", "link": "Devise/Models/Scaffolding/Types.html", "name": "Devise\\Models\\Scaffolding\\Types", "doc": "Namespace Devise\\Models\\Scaffolding\\Types"},{"type": "Namespace", "link": "Devise/Pages.html", "name": "Devise\\Pages", "doc": "Namespace Devise\\Pages"},{"type": "Namespace", "link": "Devise/Pages/Collections.html", "name": "Devise\\Pages\\Collections", "doc": "Namespace Devise\\Pages\\Collections"},{"type": "Namespace", "link": "Devise/Pages/Docs.html", "name": "Devise\\Pages\\Docs", "doc": "Namespace Devise\\Pages\\Docs"},{"type": "Namespace", "link": "Devise/Pages/Fields.html", "name": "Devise\\Pages\\Fields", "doc": "Namespace Devise\\Pages\\Fields"},{"type": "Namespace", "link": "Devise/Pages/Fields/Handlers.html", "name": "Devise\\Pages\\Fields\\Handlers", "doc": "Namespace Devise\\Pages\\Fields\\Handlers"},{"type": "Namespace", "link": "Devise/Pages/Interpreter.html", "name": "Devise\\Pages\\Interpreter", "doc": "Namespace Devise\\Pages\\Interpreter"},{"type": "Namespace", "link": "Devise/Pages/Interpreter/Exceptions.html", "name": "Devise\\Pages\\Interpreter\\Exceptions", "doc": "Namespace Devise\\Pages\\Interpreter\\Exceptions"},{"type": "Namespace", "link": "Devise/Pages/Interpreter/Modifiers.html", "name": "Devise\\Pages\\Interpreter\\Modifiers", "doc": "Namespace Devise\\Pages\\Interpreter\\Modifiers"},{"type": "Namespace", "link": "Devise/Pages/Models.html", "name": "Devise\\Pages\\Models", "doc": "Namespace Devise\\Pages\\Models"},{"type": "Namespace", "link": "Devise/Pages/Viewvars.html", "name": "Devise\\Pages\\Viewvars", "doc": "Namespace Devise\\Pages\\Viewvars"},{"type": "Namespace", "link": "Devise/Search.html", "name": "Devise\\Search", "doc": "Namespace Devise\\Search"},{"type": "Namespace", "link": "Devise/Support.html", "name": "Devise\\Support", "doc": "Namespace Devise\\Support"},{"type": "Namespace", "link": "Devise/Support/Config.html", "name": "Devise\\Support\\Config", "doc": "Namespace Devise\\Support\\Config"},{"type": "Namespace", "link": "Devise/Support/Console.html", "name": "Devise\\Support\\Console", "doc": "Namespace Devise\\Support\\Console"},{"type": "Namespace", "link": "Devise/Support/Installer.html", "name": "Devise\\Support\\Installer", "doc": "Namespace Devise\\Support\\Installer"},{"type": "Namespace", "link": "Devise/Support/Middleware.html", "name": "Devise\\Support\\Middleware", "doc": "Namespace Devise\\Support\\Middleware"},{"type": "Namespace", "link": "Devise/Support/Sortable.html", "name": "Devise\\Support\\Sortable", "doc": "Namespace Devise\\Support\\Sortable"},{"type": "Namespace", "link": "Devise/Templates.html", "name": "Devise\\Templates", "doc": "Namespace Devise\\Templates"},{"type": "Namespace", "link": "Devise/Users.html", "name": "Devise\\Users", "doc": "Namespace Devise\\Users"},{"type": "Namespace", "link": "Devise/Users/Groups.html", "name": "Devise\\Users\\Groups", "doc": "Namespace Devise\\Users\\Groups"},{"type": "Namespace", "link": "Devise/Users/Permissions.html", "name": "Devise\\Users\\Permissions", "doc": "Namespace Devise\\Users\\Permissions"},{"type": "Namespace", "link": "Devise/Users/Sessions.html", "name": "Devise\\Users\\Sessions", "doc": "Namespace Devise\\Users\\Sessions"},
            {"type": "Interface", "fromName": "Devise\\Calendar", "fromLink": "Devise/Calendar.html", "link": "Devise/Calendar/Source.html", "name": "Devise\\Calendar\\Source", "doc": "&quot;A source is a plage to fetch events given a start and\nend time. Our CalendarResponseHandler will use the\nPageVersionSource (and others possibly later) so I\nmade an interface we can all abide by if we need to\ncreate more event sources for the full calendar&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Calendar\\Source", "fromLink": "Devise/Calendar/Source.html", "link": "Devise/Calendar/Source.html#method_fetchEvents", "name": "Devise\\Calendar\\Source::fetchEvents", "doc": "&quot;Returns a list of events in FullCalendar Event format.&quot;"},
            
            
            {"type": "Class", "fromName": "Devise\\Calendar", "fromLink": "Devise/Calendar.html", "link": "Devise/Calendar/CalendarResponseHandler.html", "name": "Devise\\Calendar\\CalendarResponseHandler", "doc": "&quot;Handles the ajax calls made to backend from the Full Calendar&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Calendar\\CalendarResponseHandler", "fromLink": "Devise/Calendar/CalendarResponseHandler.html", "link": "Devise/Calendar/CalendarResponseHandler.html#method___construct", "name": "Devise\\Calendar\\CalendarResponseHandler::__construct", "doc": "&quot;Construct a new CalendarResponseHandler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Calendar\\CalendarResponseHandler", "fromLink": "Devise/Calendar/CalendarResponseHandler.html", "link": "Devise/Calendar/CalendarResponseHandler.html#method_requestPageVersionEventSource", "name": "Devise\\Calendar\\CalendarResponseHandler::requestPageVersionEventSource", "doc": "&quot;Requests the json for a given start and stop date for a given page source&quot;"},
                    {"type": "Method", "fromName": "Devise\\Calendar\\CalendarResponseHandler", "fromLink": "Devise/Calendar/CalendarResponseHandler.html", "link": "Devise/Calendar/CalendarResponseHandler.html#method_requestPageVersionEventUpdate", "name": "Devise\\Calendar\\CalendarResponseHandler::requestPageVersionEventUpdate", "doc": "&quot;Requests that a page version event&#039;s start and end times\nbe updated&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Calendar", "fromLink": "Devise/Calendar.html", "link": "Devise/Calendar/PageVersionSource.html", "name": "Devise\\Calendar\\PageVersionSource", "doc": "&quot;Purpose of this class is to source out events\nthat are page versions in disguise. It also handles\nupdating a page version event if the user has changed\nit on the front end calendar .&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Calendar\\PageVersionSource", "fromLink": "Devise/Calendar/PageVersionSource.html", "link": "Devise/Calendar/PageVersionSource.html#method___construct", "name": "Devise\\Calendar\\PageVersionSource::__construct", "doc": "&quot;Create a new PageVersionSource&quot;"},
                    {"type": "Method", "fromName": "Devise\\Calendar\\PageVersionSource", "fromLink": "Devise/Calendar/PageVersionSource.html", "link": "Devise/Calendar/PageVersionSource.html#method_fetchEvents", "name": "Devise\\Calendar\\PageVersionSource::fetchEvents", "doc": "&quot;Returns a list of events in FullCalendar Event format.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Calendar\\PageVersionSource", "fromLink": "Devise/Calendar/PageVersionSource.html", "link": "Devise/Calendar/PageVersionSource.html#method_updatePageVersion", "name": "Devise\\Calendar\\PageVersionSource::updatePageVersion", "doc": "&quot;This is here so that we can update a page version event&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Calendar", "fromLink": "Devise/Calendar.html", "link": "Devise/Calendar/Source.html", "name": "Devise\\Calendar\\Source", "doc": "&quot;A source is a plage to fetch events given a start and\nend time. Our CalendarResponseHandler will use the\nPageVersionSource (and others possibly later) so I\nmade an interface we can all abide by if we need to\ncreate more event sources for the full calendar&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Calendar\\Source", "fromLink": "Devise/Calendar/Source.html", "link": "Devise/Calendar/Source.html#method_fetchEvents", "name": "Devise\\Calendar\\Source::fetchEvents", "doc": "&quot;Returns a list of events in FullCalendar Event format.&quot;"},
            
            {"type": "Class", "fromName": "Devise", "fromLink": "Devise.html", "link": "Devise/DeviseServiceProvider.html", "name": "Devise\\DeviseServiceProvider", "doc": "&quot;This class loads all the providers in other folders for\nall of devise. We don&#039;t want the developer to have to load\n10 different service providers to work with devise, so\nthis class is just a wrapper to load all of the service\nproviders instead of having to load 10 individual ones in\nthe app\/config\/app.php file&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\DeviseServiceProvider", "fromLink": "Devise/DeviseServiceProvider.html", "link": "Devise/DeviseServiceProvider.html#method_boot", "name": "Devise\\DeviseServiceProvider::boot", "doc": "&quot;Bootstrap the application events.&quot;"},
                    {"type": "Method", "fromName": "Devise\\DeviseServiceProvider", "fromLink": "Devise/DeviseServiceProvider.html", "link": "Devise/DeviseServiceProvider.html#method_register", "name": "Devise\\DeviseServiceProvider::register", "doc": "&quot;Register the service provider.&quot;"},
                    {"type": "Method", "fromName": "Devise\\DeviseServiceProvider", "fromLink": "Devise/DeviseServiceProvider.html", "link": "Devise/DeviseServiceProvider.html#method_provides", "name": "Devise\\DeviseServiceProvider::provides", "doc": "&quot;Get the services provided by the provider.&quot;"},
                    {"type": "Method", "fromName": "Devise\\DeviseServiceProvider", "fromLink": "Devise/DeviseServiceProvider.html", "link": "Devise/DeviseServiceProvider.html#method_registerEncoding", "name": "Devise\\DeviseServiceProvider::registerEncoding", "doc": "&quot;Register encoding service provider&quot;"},
                    {"type": "Method", "fromName": "Devise\\DeviseServiceProvider", "fromLink": "Devise/DeviseServiceProvider.html", "link": "Devise/DeviseServiceProvider.html#method_registerDeviseUniversalSearch", "name": "Devise\\DeviseServiceProvider::registerDeviseUniversalSearch", "doc": "&quot;Register universal search service provider&quot;"},
                    {"type": "Method", "fromName": "Devise\\DeviseServiceProvider", "fromLink": "Devise/DeviseServiceProvider.html", "link": "Devise/DeviseServiceProvider.html#method_registerUsers", "name": "Devise\\DeviseServiceProvider::registerUsers", "doc": "&quot;Register users service provider&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Languages", "fromLink": "Devise/Languages.html", "link": "Devise/Languages/LanguageDetector.html", "name": "Devise\\Languages\\LanguageDetector", "doc": "&quot;Language detector is used to determine the current and\nuniversal languages for this system. It uses LocaleDetector\nto get the universal code, i.e &#039;en&#039;, &#039;es&#039;, and then fetches\nthe DvsLanguage from the database&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Languages\\LanguageDetector", "fromLink": "Devise/Languages/LanguageDetector.html", "link": "Devise/Languages/LanguageDetector.html#method___construct", "name": "Devise\\Languages\\LanguageDetector::__construct", "doc": "&quot;Create a new Language Detector&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LanguageDetector", "fromLink": "Devise/Languages/LanguageDetector.html", "link": "Devise/Languages/LanguageDetector.html#method_current", "name": "Devise\\Languages\\LanguageDetector::current", "doc": "&quot;Get the current language for the locale\nthis will probably use the cookie as default&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LanguageDetector", "fromLink": "Devise/Languages/LanguageDetector.html", "link": "Devise/Languages/LanguageDetector.html#method_universal", "name": "Devise\\Languages\\LanguageDetector::universal", "doc": "&quot;Get the universal language that we fallback\nto.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LanguageDetector", "fromLink": "Devise/Languages/LanguageDetector.html", "link": "Devise/Languages/LanguageDetector.html#method_update", "name": "Devise\\Languages\\LanguageDetector::update", "doc": "&quot;Update the current language for this\nbrowser&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LanguageDetector", "fromLink": "Devise/Languages/LanguageDetector.html", "link": "Devise/Languages/LanguageDetector.html#method_primaryLanguageId", "name": "Devise\\Languages\\LanguageDetector::primaryLanguageId", "doc": "&quot;Returns the primary language id for this system&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Languages", "fromLink": "Devise/Languages.html", "link": "Devise/Languages/LanguagesManager.html", "name": "Devise\\Languages\\LanguagesManager", "doc": "&quot;The languages manager allows us to manage\nthe all things related to DvsLanguage model&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Languages\\LanguagesManager", "fromLink": "Devise/Languages/LanguagesManager.html", "link": "Devise/Languages/LanguagesManager.html#method___construct", "name": "Devise\\Languages\\LanguagesManager::__construct", "doc": "&quot;Construct a new language manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LanguagesManager", "fromLink": "Devise/Languages/LanguagesManager.html", "link": "Devise/Languages/LanguagesManager.html#method_modifyActiveFlag", "name": "Devise\\Languages\\LanguagesManager::modifyActiveFlag", "doc": "&quot;Updates the active field of a language&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Languages", "fromLink": "Devise/Languages.html", "link": "Devise/Languages/LanguagesRepository.html", "name": "Devise\\Languages\\LanguagesRepository", "doc": "&quot;The langauges repository provides methods to\nfetch rows in the context of DvsLanguage model&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Languages\\LanguagesRepository", "fromLink": "Devise/Languages/LanguagesRepository.html", "link": "Devise/Languages/LanguagesRepository.html#method___construct", "name": "Devise\\Languages\\LanguagesRepository::__construct", "doc": "&quot;Construct language repository&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LanguagesRepository", "fromLink": "Devise/Languages/LanguagesRepository.html", "link": "Devise/Languages/LanguagesRepository.html#method_languages", "name": "Devise\\Languages\\LanguagesRepository::languages", "doc": "&quot;Paginated list of languages&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LanguagesRepository", "fromLink": "Devise/Languages/LanguagesRepository.html", "link": "Devise/Languages/LanguagesRepository.html#method_activeLanguageList", "name": "Devise\\Languages\\LanguagesRepository::activeLanguageList", "doc": "&quot;List of active languages&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LanguagesRepository", "fromLink": "Devise/Languages/LanguagesRepository.html", "link": "Devise/Languages/LanguagesRepository.html#method_languageSelectorOptions", "name": "Devise\\Languages\\LanguagesRepository::languageSelectorOptions", "doc": "&quot;List of options for the a language selector&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LanguagesRepository", "fromLink": "Devise/Languages/LanguagesRepository.html", "link": "Devise/Languages/LanguagesRepository.html#method_currentLanguage", "name": "Devise\\Languages\\LanguagesRepository::currentLanguage", "doc": "&quot;Magical method that gets the language for\nthe current request and user&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LanguagesRepository", "fromLink": "Devise/Languages/LanguagesRepository.html", "link": "Devise/Languages/LanguagesRepository.html#method_findLanguageForPageVersion", "name": "Devise\\Languages\\LanguagesRepository::findLanguageForPageVersion", "doc": "&quot;Finds the language for a given page version&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Languages", "fromLink": "Devise/Languages.html", "link": "Devise/Languages/LanguagesResponseHandler.html", "name": "Devise\\Languages\\LanguagesResponseHandler", "doc": "&quot;Handles responses for language routes. This class\nis likely used as a response&lt;em&gt;path to a dvs&lt;\/em&gt;page\nfield.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Languages\\LanguagesResponseHandler", "fromLink": "Devise/Languages/LanguagesResponseHandler.html", "link": "Devise/Languages/LanguagesResponseHandler.html#method___construct", "name": "Devise\\Languages\\LanguagesResponseHandler::__construct", "doc": "&quot;Construct new response handler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LanguagesResponseHandler", "fromLink": "Devise/Languages/LanguagesResponseHandler.html", "link": "Devise/Languages/LanguagesResponseHandler.html#method_requestPatchLanguage", "name": "Devise\\Languages\\LanguagesResponseHandler::requestPatchLanguage", "doc": "&quot;Patch a language&#039;s active flag&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Languages", "fromLink": "Devise/Languages.html", "link": "Devise/Languages/LocaleDetector.html", "name": "Devise\\Languages\\LocaleDetector", "doc": "&quot;Locales are shorthand 2 letter strings\nfor a language\/region.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Languages\\LocaleDetector", "fromLink": "Devise/Languages/LocaleDetector.html", "link": "Devise/Languages/LocaleDetector.html#method_current", "name": "Devise\\Languages\\LocaleDetector::current", "doc": "&quot;Get the current locale. At first we try\nto use the cookie if one is set. If a cookie\nis not set then we attempt to deduce the locale\nin this order: url segment, http headers, and finally\nwe fall back to the universal locale which is\nset in laravel&#039;s app.locale (defaults to en).&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LocaleDetector", "fromLink": "Devise/Languages/LocaleDetector.html", "link": "Devise/Languages/LocaleDetector.html#method_cookie", "name": "Devise\\Languages\\LocaleDetector::cookie", "doc": "&quot;Get the locale from a cookie&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LocaleDetector", "fromLink": "Devise/Languages/LocaleDetector.html", "link": "Devise/Languages/LocaleDetector.html#method_universal", "name": "Devise\\Languages\\LocaleDetector::universal", "doc": "&quot;Get the universal locale set by developer and laravel&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LocaleDetector", "fromLink": "Devise/Languages/LocaleDetector.html", "link": "Devise/Languages/LocaleDetector.html#method_header", "name": "Devise\\Languages\\LocaleDetector::header", "doc": "&quot;Get locale from header accept string&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LocaleDetector", "fromLink": "Devise/Languages/LocaleDetector.html", "link": "Devise/Languages/LocaleDetector.html#method_segment", "name": "Devise\\Languages\\LocaleDetector::segment", "doc": "&quot;We don&#039;t use this, but we could use it later\nif we wanted to. It would get the locale\nfrom the first segment of the url, e.g.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Languages\\LocaleDetector", "fromLink": "Devise/Languages/LocaleDetector.html", "link": "Devise/Languages/LocaleDetector.html#method_update", "name": "Devise\\Languages\\LocaleDetector::update", "doc": "&quot;Updates the locale stored in this cookie&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Categories", "fromLink": "Devise/Media/Categories.html", "link": "Devise/Media/Categories/CategoryAlreadyExistsException.html", "name": "Devise\\Media\\Categories\\CategoryAlreadyExistsException", "doc": "&quot;Class CategoryAlreadyExistsException is thrown\nwhenever the Categories\/Manager finds a duplicate\ncategory. (If you try to create the same directory)&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Media\\Categories", "fromLink": "Devise/Media/Categories.html", "link": "Devise/Media/Categories/CategoryPaths.html", "name": "Devise\\Media\\Categories\\CategoryPaths", "doc": "&quot;Class CategoryPaths converts dot paths to real paths\nand also finds server paths and browser urls to the configured\nroot media directory where all our media files are stored at.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Categories\\CategoryPaths", "fromLink": "Devise/Media/Categories/CategoryPaths.html", "link": "Devise/Media/Categories/CategoryPaths.html#method___construct", "name": "Devise\\Media\\Categories\\CategoryPaths::__construct", "doc": "&quot;Create a new category path&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Categories\\CategoryPaths", "fromLink": "Devise/Media/Categories/CategoryPaths.html", "link": "Devise/Media/Categories/CategoryPaths.html#method_fromDot", "name": "Devise\\Media\\Categories\\CategoryPaths::fromDot", "doc": "&quot;Convert dots to slashes in the path&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Categories\\CategoryPaths", "fromLink": "Devise/Media/Categories/CategoryPaths.html", "link": "Devise/Media/Categories/CategoryPaths.html#method_toDot", "name": "Devise\\Media\\Categories\\CategoryPaths::toDot", "doc": "&quot;Convert slashes into dots in the path&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Categories\\CategoryPaths", "fromLink": "Devise/Media/Categories/CategoryPaths.html", "link": "Devise/Media/Categories/CategoryPaths.html#method_serverPath", "name": "Devise\\Media\\Categories\\CategoryPaths::serverPath", "doc": "&quot;Server path is the real path to the root media directory&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Categories\\CategoryPaths", "fromLink": "Devise/Media/Categories/CategoryPaths.html", "link": "Devise/Media/Categories/CategoryPaths.html#method_browserPath", "name": "Devise\\Media\\Categories\\CategoryPaths::browserPath", "doc": "&quot;Browser path is the url path to this root media directory&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Categories", "fromLink": "Devise/Media/Categories.html", "link": "Devise/Media/Categories/Manager.html", "name": "Devise\\Media\\Categories\\Manager", "doc": "&quot;Class Manager manages categories. A category is basically\na directory inside of the \/media folder.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Categories\\Manager", "fromLink": "Devise/Media/Categories/Manager.html", "link": "Devise/Media/Categories/Manager.html#method___construct", "name": "Devise\\Media\\Categories\\Manager::__construct", "doc": "&quot;Create a new category manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Categories\\Manager", "fromLink": "Devise/Media/Categories/Manager.html", "link": "Devise/Media/Categories/Manager.html#method_storeNewCategory", "name": "Devise\\Media\\Categories\\Manager::storeNewCategory", "doc": "&quot;Stores the category in the filesystem&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Categories\\Manager", "fromLink": "Devise/Media/Categories/Manager.html", "link": "Devise/Media/Categories/Manager.html#method_destroyCategory", "name": "Devise\\Media\\Categories\\Manager::destroyCategory", "doc": "&quot;Removes the category path&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Categories\\Manager", "fromLink": "Devise/Media/Categories/Manager.html", "link": "Devise/Media/Categories/Manager.html#method_renameCategory", "name": "Devise\\Media\\Categories\\Manager::renameCategory", "doc": "&quot;Renames a category path&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Categories", "fromLink": "Devise/Media/Categories.html", "link": "Devise/Media/Categories/ResponseHandler.html", "name": "Devise\\Media\\Categories\\ResponseHandler", "doc": "&quot;Class ResponseHandler handles the controller side\nof managing categories. These methods are likely\nreferenced in dvs_pages table&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Categories\\ResponseHandler", "fromLink": "Devise/Media/Categories/ResponseHandler.html", "link": "Devise/Media/Categories/ResponseHandler.html#method___construct", "name": "Devise\\Media\\Categories\\ResponseHandler::__construct", "doc": "&quot;Construct a new response handler for categories&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Categories\\ResponseHandler", "fromLink": "Devise/Media/Categories/ResponseHandler.html", "link": "Devise/Media/Categories/ResponseHandler.html#method_requestStore", "name": "Devise\\Media\\Categories\\ResponseHandler::requestStore", "doc": "&quot;Request a category be stored&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Categories\\ResponseHandler", "fromLink": "Devise/Media/Categories/ResponseHandler.html", "link": "Devise/Media/Categories/ResponseHandler.html#method_requestDestroy", "name": "Devise\\Media\\Categories\\ResponseHandler::requestDestroy", "doc": "&quot;Request a category be destroyed&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Categories\\ResponseHandler", "fromLink": "Devise/Media/Categories/ResponseHandler.html", "link": "Devise/Media/Categories/ResponseHandler.html#method_requestRename", "name": "Devise\\Media\\Categories\\ResponseHandler::requestRename", "doc": "&quot;Request a category be renamed&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Encoding", "fromLink": "Devise/Media/Encoding.html", "link": "Devise/Media/Encoding/EncodingServiceProvider.html", "name": "Devise\\Media\\Encoding\\EncodingServiceProvider", "doc": "&quot;Registers a new devise.video.encoder we can use\nglobally throughout Laravel&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Encoding\\EncodingServiceProvider", "fromLink": "Devise/Media/Encoding/EncodingServiceProvider.html", "link": "Devise/Media/Encoding/EncodingServiceProvider.html#method_boot", "name": "Devise\\Media\\Encoding\\EncodingServiceProvider::boot", "doc": "&quot;Bootstrap the application events.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Encoding\\EncodingServiceProvider", "fromLink": "Devise/Media/Encoding/EncodingServiceProvider.html", "link": "Devise/Media/Encoding/EncodingServiceProvider.html#method_register", "name": "Devise\\Media\\Encoding\\EncodingServiceProvider::register", "doc": "&quot;Register the service provider.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Encoding\\EncodingServiceProvider", "fromLink": "Devise/Media/Encoding/EncodingServiceProvider.html", "link": "Devise/Media/Encoding/EncodingServiceProvider.html#method_provides", "name": "Devise\\Media\\Encoding\\EncodingServiceProvider::provides", "doc": "&quot;Get the services provided by the provider.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Encoding", "fromLink": "Devise/Media/Encoding.html", "link": "Devise/Media/Encoding/InvalidEncodingSettingsException.html", "name": "Devise\\Media\\Encoding\\InvalidEncodingSettingsException", "doc": "&quot;Class InvalidEncodingSettingsException is thrown in ZencoderJob\nanytime invalid settings are passed in when trying to create a\nnew Zencoder api call to start encoding videos&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Media\\Encoding", "fromLink": "Devise/Media/Encoding.html", "link": "Devise/Media/Encoding/ZencoderJob.html", "name": "Devise\\Media\\Encoding\\ZencoderJob", "doc": "&quot;Class ZencoderJob handles incoming requests that have been\ncompleted by Zencoder. Also pushes requests to Zencoder api.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Encoding\\ZencoderJob", "fromLink": "Devise/Media/Encoding/ZencoderJob.html", "link": "Devise/Media/Encoding/ZencoderJob.html#method___construct", "name": "Devise\\Media\\Encoding\\ZencoderJob::__construct", "doc": "&quot;Create a new ZencoderJob&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Encoding\\ZencoderJob", "fromLink": "Devise/Media/Encoding/ZencoderJob.html", "link": "Devise/Media/Encoding/ZencoderJob.html#method_create", "name": "Devise\\Media\\Encoding\\ZencoderJob::create", "doc": "&quot;Create a new job with this file path and settings&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Encoding\\ZencoderJob", "fromLink": "Devise/Media/Encoding/ZencoderJob.html", "link": "Devise/Media/Encoding/ZencoderJob.html#method_handle", "name": "Devise\\Media\\Encoding\\ZencoderJob::handle", "doc": "&quot;Fire events when you see this job has been\ncalled back&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Encoding", "fromLink": "Devise/Media/Encoding.html", "link": "Devise/Media/Encoding/ZencoderNotificationsController.html", "name": "Devise\\Media\\Encoding\\ZencoderNotificationsController", "doc": "&quot;Class ZencoderNotificationsController handles incoming requests\nfrom the zencoder server when it is finished encoding our videos\nin order to let us know it is time to download the encoded video\nback to our own servers&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Encoding\\ZencoderNotificationsController", "fromLink": "Devise/Media/Encoding/ZencoderNotificationsController.html", "link": "Devise/Media/Encoding/ZencoderNotificationsController.html#method___construct", "name": "Devise\\Media\\Encoding\\ZencoderNotificationsController::__construct", "doc": "&quot;Create a new ZencoderNotificationsController&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Encoding\\ZencoderNotificationsController", "fromLink": "Devise/Media/Encoding/ZencoderNotificationsController.html", "link": "Devise/Media/Encoding/ZencoderNotificationsController.html#method_store", "name": "Devise\\Media\\Encoding\\ZencoderNotificationsController::store", "doc": "&quot;Stores this video file from zencoder servers onto our local server&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Files", "fromLink": "Devise/Media/Files.html", "link": "Devise/Media/Files/FileDownloader.html", "name": "Devise\\Media\\Files\\FileDownloader", "doc": "&quot;Class FileDownloader downloads a file from\nthe internet and saves it into a specified directory&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Files\\FileDownloader", "fromLink": "Devise/Media/Files/FileDownloader.html", "link": "Devise/Media/Files/FileDownloader.html#method___construct", "name": "Devise\\Media\\Files\\FileDownloader::__construct", "doc": "&quot;Create a new FileDownloader&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Files\\FileDownloader", "fromLink": "Devise/Media/Files/FileDownloader.html", "link": "Devise/Media/Files/FileDownloader.html#method_download", "name": "Devise\\Media\\Files\\FileDownloader::download", "doc": "&quot;Download a file from the given $url and save\nit to $toPath with $filename. If $filename\nis null then we just use the name from the $url&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Files", "fromLink": "Devise/Media/Files.html", "link": "Devise/Media/Files/Filesystem.html", "name": "Devise\\Media\\Files\\Filesystem", "doc": "&quot;Class Filesystem inherits from Illuminate\\Filesystem\\Filesystem\nbut adds some additional functionality such as file searching.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Files\\Filesystem", "fromLink": "Devise/Media/Files/Filesystem.html", "link": "Devise/Media/Files/Filesystem.html#method_search", "name": "Devise\\Media\\Files\\Filesystem::search", "doc": "&quot;Search this directory for this pattern&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Files\\Filesystem", "fromLink": "Devise/Media/Files/Filesystem.html", "link": "Devise/Media/Files/Filesystem.html#method_rename", "name": "Devise\\Media\\Files\\Filesystem::rename", "doc": "&quot;Relocates a path from a location to a new location&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Files", "fromLink": "Devise/Media/Files.html", "link": "Devise/Media/Files/InvalidFileException.html", "name": "Devise\\Media\\Files\\InvalidFileException", "doc": "&quot;Class InvalidFileException is thrown in MediaPaths\nwhenever the file path given is not valid (it doesn&#039;t exist)&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Media\\Files", "fromLink": "Devise/Media/Files.html", "link": "Devise/Media/Files/Manager.html", "name": "Devise\\Media\\Files\\Manager", "doc": "&quot;Class Manager&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Files\\Manager", "fromLink": "Devise/Media/Files/Manager.html", "link": "Devise/Media/Files/Manager.html#method___construct", "name": "Devise\\Media\\Files\\Manager::__construct", "doc": "&quot;Construct a new File manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Files\\Manager", "fromLink": "Devise/Media/Files/Manager.html", "link": "Devise/Media/Files/Manager.html#method_saveUploadedFile", "name": "Devise\\Media\\Files\\Manager::saveUploadedFile", "doc": "&quot;Saves the uploaded file to the media directory&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Files\\Manager", "fromLink": "Devise/Media/Files/Manager.html", "link": "Devise/Media/Files/Manager.html#method_renameUploadedFile", "name": "Devise\\Media\\Files\\Manager::renameUploadedFile", "doc": "&quot;Renames an uploaded file&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Files\\Manager", "fromLink": "Devise/Media/Files/Manager.html", "link": "Devise/Media/Files/Manager.html#method_removeUploadedFile", "name": "Devise\\Media\\Files\\Manager::removeUploadedFile", "doc": "&quot;Remove uploaded files from the \/media directory&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Files", "fromLink": "Devise/Media/Files.html", "link": "Devise/Media/Files/Repository.html", "name": "Devise\\Media\\Files\\Repository", "doc": "&quot;Class Repository builds a complex array of data around the file structure\nof the media manager. This let&#039;s us fetch a lot of things regarding the\nfile system around the media manager&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Files\\Repository", "fromLink": "Devise/Media/Files/Repository.html", "link": "Devise/Media/Files/Repository.html#method___construct", "name": "Devise\\Media\\Files\\Repository::__construct", "doc": "&quot;Constructs a new repository&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Files\\Repository", "fromLink": "Devise/Media/Files/Repository.html", "link": "Devise/Media/Files/Repository.html#method_compileIndexData", "name": "Devise\\Media\\Files\\Repository::compileIndexData", "doc": "&quot;Not really sure, gonna revisit this later.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Files", "fromLink": "Devise/Media/Files.html", "link": "Devise/Media/Files/ResponseHandler.html", "name": "Devise\\Media\\Files\\ResponseHandler", "doc": "&quot;Class ResponseHandler handles controller part of media manager\nas far as uploading, renaming and removing media files goes&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Files\\ResponseHandler", "fromLink": "Devise/Media/Files/ResponseHandler.html", "link": "Devise/Media/Files/ResponseHandler.html#method___construct", "name": "Devise\\Media\\Files\\ResponseHandler::__construct", "doc": "&quot;Construct a new response handler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Files\\ResponseHandler", "fromLink": "Devise/Media/Files/ResponseHandler.html", "link": "Devise/Media/Files/ResponseHandler.html#method_requestUpload", "name": "Devise\\Media\\Files\\ResponseHandler::requestUpload", "doc": "&quot;Requests a file upload&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Files\\ResponseHandler", "fromLink": "Devise/Media/Files/ResponseHandler.html", "link": "Devise/Media/Files/ResponseHandler.html#method_requestRename", "name": "Devise\\Media\\Files\\ResponseHandler::requestRename", "doc": "&quot;Requests a file rename&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Files\\ResponseHandler", "fromLink": "Devise/Media/Files/ResponseHandler.html", "link": "Devise/Media/Files/ResponseHandler.html#method_requestRemove", "name": "Devise\\Media\\Files\\ResponseHandler::requestRemove", "doc": "&quot;Requests a file removal&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Images", "fromLink": "Devise/Media/Images.html", "link": "Devise/Media/Images/Images.html", "name": "Devise\\Media\\Images\\Images", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Images\\Images", "fromLink": "Devise/Media/Images/Images.html", "link": "Devise/Media/Images/Images.html#method_copyImage", "name": "Devise\\Media\\Images\\Images::copyImage", "doc": "&quot;Copies an image from one location to another location,\nalso handles creating sub directories if they don&#039;t already\nexist for us&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Images\\Images", "fromLink": "Devise/Media/Images/Images.html", "link": "Devise/Media/Images/Images.html#method_cropImage", "name": "Devise\\Media\\Images\\Images::cropImage", "doc": "&quot;Crop this image path to crop dimensions, these dimensions\nare coming from the JCrop javascript tool being passed in\nto us&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Images\\Images", "fromLink": "Devise/Media/Images/Images.html", "link": "Devise/Media/Images/Images.html#method_canMakeThumbnailFromFile", "name": "Devise\\Media\\Images\\Images::canMakeThumbnailFromFile", "doc": "&quot;Lets us know if we can make a thumbnail from this file objet&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Images\\Images", "fromLink": "Devise/Media/Images/Images.html", "link": "Devise/Media/Images/Images.html#method_resizeImage", "name": "Devise\\Media\\Images\\Images::resizeImage", "doc": "&quot;Resize this image path to specified width and height&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Images\\Images", "fromLink": "Devise/Media/Images/Images.html", "link": "Devise/Media/Images/Images.html#method_cropAndResizeImage", "name": "Devise\\Media\\Images\\Images::cropAndResizeImage", "doc": "&quot;Crops the image path and then resizes, used by the JCrop tool\nwhen we upload images via the Devise Sidebar&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Images\\Images", "fromLink": "Devise/Media/Images/Images.html", "link": "Devise/Media/Images/Images.html#method_saveImage", "name": "Devise\\Media\\Images\\Images::saveImage", "doc": "&quot;Save the image to this path, also recursively\ncreates the directories if they don&#039;t exist&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Images\\Images", "fromLink": "Devise/Media/Images/Images.html", "link": "Devise/Media/Images/Images.html#method_makeThumbnailImage", "name": "Devise\\Media\\Images\\Images::makeThumbnailImage", "doc": "&quot;Makes a thumbnail out of a file&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Images", "fromLink": "Devise/Media/Images.html", "link": "Devise/Media/Images/Manager.html", "name": "Devise\\Media\\Images\\Manager", "doc": "&quot;Class Manager takes care of image management. This lets us\nget a list of images and also crop and resize images&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Images\\Manager", "fromLink": "Devise/Media/Images/Manager.html", "link": "Devise/Media/Images/Manager.html#method___construct", "name": "Devise\\Media\\Images\\Manager::__construct", "doc": "&quot;Construct a new image manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Images\\Manager", "fromLink": "Devise/Media/Images/Manager.html", "link": "Devise/Media/Images/Manager.html#method_extractImagesForCallback", "name": "Devise\\Media\\Images\\Manager::extractImagesForCallback", "doc": "&quot;Not sure what this is for. Looks like it extracts images\nfrom a category path.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Images\\Manager", "fromLink": "Devise/Media/Images/Manager.html", "link": "Devise/Media/Images/Manager.html#method_getImageUrl", "name": "Devise\\Media\\Images\\Manager::getImageUrl", "doc": "&quot;Image url for a given category and image&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Images\\Manager", "fromLink": "Devise/Media/Images/Manager.html", "link": "Devise/Media/Images/Manager.html#method_cropAndSaveFile", "name": "Devise\\Media\\Images\\Manager::cropAndSaveFile", "doc": "&quot;Crop and save an image&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media\\Images", "fromLink": "Devise/Media/Images.html", "link": "Devise/Media/Images/ResponseHandler.html", "name": "Devise\\Media\\Images\\ResponseHandler", "doc": "&quot;Class ResponseHandler handles requests (controller\/route)\nmade to crop images&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\Images\\ResponseHandler", "fromLink": "Devise/Media/Images/ResponseHandler.html", "link": "Devise/Media/Images/ResponseHandler.html#method___construct", "name": "Devise\\Media\\Images\\ResponseHandler::__construct", "doc": "&quot;Construct a new image response handler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\Images\\ResponseHandler", "fromLink": "Devise/Media/Images/ResponseHandler.html", "link": "Devise/Media/Images/ResponseHandler.html#method_requestCrop", "name": "Devise\\Media\\Images\\ResponseHandler::requestCrop", "doc": "&quot;Request a crop&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Media", "fromLink": "Devise/Media.html", "link": "Devise/Media/MediaPaths.html", "name": "Devise\\Media\\MediaPaths", "doc": "&quot;Class MediaPaths abstracts away paths that we can use\nand also has a few helper methods for other classes to use&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Media\\MediaPaths", "fromLink": "Devise/Media/MediaPaths.html", "link": "Devise/Media/MediaPaths.html#method___construct", "name": "Devise\\Media\\MediaPaths::__construct", "doc": "&quot;Create a new Media Path Helper\nthe purpose of this class is to determine\npaths for media (and versions of media)&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\MediaPaths", "fromLink": "Devise/Media/MediaPaths.html", "link": "Devise/Media/MediaPaths.html#method_basePath", "name": "Devise\\Media\\MediaPaths::basePath", "doc": "&quot;Gets the basepath for us&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\MediaPaths", "fromLink": "Devise/Media/MediaPaths.html", "link": "Devise/Media/MediaPaths.html#method_fileExists", "name": "Devise\\Media\\MediaPaths::fileExists", "doc": "&quot;Check to see if a file exists or not&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\MediaPaths", "fromLink": "Devise/Media/MediaPaths.html", "link": "Devise/Media/MediaPaths.html#method_touch", "name": "Devise\\Media\\MediaPaths::touch", "doc": "&quot;Create an empty file in this location&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\MediaPaths", "fromLink": "Devise/Media/MediaPaths.html", "link": "Devise/Media/MediaPaths.html#method_fileVersionInfoFromUrl", "name": "Devise\\Media\\MediaPaths::fileVersionInfoFromUrl", "doc": "&quot;Gets the versioned path to this $url path&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\MediaPaths", "fromLink": "Devise/Media/MediaPaths.html", "link": "Devise/Media/MediaPaths.html#method_fileVersionInfo", "name": "Devise\\Media\\MediaPaths::fileVersionInfo", "doc": "&quot;Gets the versioned path to this file&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\MediaPaths", "fromLink": "Devise/Media/MediaPaths.html", "link": "Devise/Media/MediaPaths.html#method_makeRelativePath", "name": "Devise\\Media\\MediaPaths::makeRelativePath", "doc": "&quot;Make this path relative to public directory&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\MediaPaths", "fromLink": "Devise/Media/MediaPaths.html", "link": "Devise/Media/MediaPaths.html#method_zencoderUrl", "name": "Devise\\Media\\MediaPaths::zencoderUrl", "doc": "&quot;Returns the zencoder url for this filename&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\MediaPaths", "fromLink": "Devise/Media/MediaPaths.html", "link": "Devise/Media/MediaPaths.html#method_downloadFromUrl", "name": "Devise\\Media\\MediaPaths::downloadFromUrl", "doc": "&quot;Downloads the image so that we can re-use it\nlater and crop it and resize it accordingly&quot;"},
                    {"type": "Method", "fromName": "Devise\\Media\\MediaPaths", "fromLink": "Devise/Media/MediaPaths.html", "link": "Devise/Media/MediaPaths.html#method_isUrlPath", "name": "Devise\\Media\\MediaPaths::isUrlPath", "doc": "&quot;Returns true or false depending on if this is\nan image url or not&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Menus", "fromLink": "Devise/Menus.html", "link": "Devise/Menus/MenuCache.html", "name": "Devise\\Menus\\MenuCache", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Menus\\MenuCache", "fromLink": "Devise/Menus/MenuCache.html", "link": "Devise/Menus/MenuCache.html#method_saveMenu", "name": "Devise\\Menus\\MenuCache::saveMenu", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenuCache", "fromLink": "Devise/Menus/MenuCache.html", "link": "Devise/Menus/MenuCache.html#method_loadMenu", "name": "Devise\\Menus\\MenuCache::loadMenu", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenuCache", "fromLink": "Devise/Menus/MenuCache.html", "link": "Devise/Menus/MenuCache.html#method_forgetMenu", "name": "Devise\\Menus\\MenuCache::forgetMenu", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Menus", "fromLink": "Devise/Menus.html", "link": "Devise/Menus/MenusManager.html", "name": "Devise\\Menus\\MenusManager", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Menus\\MenusManager", "fromLink": "Devise/Menus/MenusManager.html", "link": "Devise/Menus/MenusManager.html#method___construct", "name": "Devise\\Menus\\MenusManager::__construct", "doc": "&quot;Construct a new user manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusManager", "fromLink": "Devise/Menus/MenusManager.html", "link": "Devise/Menus/MenusManager.html#method_createRules", "name": "Devise\\Menus\\MenusManager::createRules", "doc": "&quot;These are create rules for a menu&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusManager", "fromLink": "Devise/Menus/MenusManager.html", "link": "Devise/Menus/MenusManager.html#method_createMenu", "name": "Devise\\Menus\\MenusManager::createMenu", "doc": "&quot;Creates a new menu&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusManager", "fromLink": "Devise/Menus/MenusManager.html", "link": "Devise/Menus/MenusManager.html#method_updateRules", "name": "Devise\\Menus\\MenusManager::updateRules", "doc": "&quot;These are the update rules for a menu given an id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusManager", "fromLink": "Devise/Menus/MenusManager.html", "link": "Devise/Menus/MenusManager.html#method_updateMenu", "name": "Devise\\Menus\\MenusManager::updateMenu", "doc": "&quot;Updates the active field of a Menu&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Menus", "fromLink": "Devise/Menus.html", "link": "Devise/Menus/MenusRepository.html", "name": "Devise\\Menus\\MenusRepository", "doc": "&quot;Class MenusRepository retrieves things related to\nDvsMenu and DvsMenuItems database table&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Menus\\MenusRepository", "fromLink": "Devise/Menus/MenusRepository.html", "link": "Devise/Menus/MenusRepository.html#method___construct", "name": "Devise\\Menus\\MenusRepository::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusRepository", "fromLink": "Devise/Menus/MenusRepository.html", "link": "Devise/Menus/MenusRepository.html#method_menus", "name": "Devise\\Menus\\MenusRepository::menus", "doc": "&quot;Returns a Collection of DvsMenus&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusRepository", "fromLink": "Devise/Menus/MenusRepository.html", "link": "Devise/Menus/MenusRepository.html#method_findById", "name": "Devise\\Menus\\MenusRepository::findById", "doc": "&quot;Finds DvsMenu by an integer id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusRepository", "fromLink": "Devise/Menus/MenusRepository.html", "link": "Devise/Menus/MenusRepository.html#method_findMenuByName", "name": "Devise\\Menus\\MenusRepository::findMenuByName", "doc": "&quot;Find menu using name value&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusRepository", "fromLink": "Devise/Menus/MenusRepository.html", "link": "Devise/Menus/MenusRepository.html#method_buildMenu", "name": "Devise\\Menus\\MenusRepository::buildMenu", "doc": "&quot;Build a menu from it&#039;s name&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusRepository", "fromLink": "Devise/Menus/MenusRepository.html", "link": "Devise/Menus/MenusRepository.html#method_getChildrenMenuItems", "name": "Devise\\Menus\\MenusRepository::getChildrenMenuItems", "doc": "&quot;Get the children menu items of a menu name&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusRepository", "fromLink": "Devise/Menus/MenusRepository.html", "link": "Devise/Menus/MenusRepository.html#method_getSiblingMenuItems", "name": "Devise\\Menus\\MenusRepository::getSiblingMenuItems", "doc": "&quot;Get menu siblings&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusRepository", "fromLink": "Devise/Menus/MenusRepository.html", "link": "Devise/Menus/MenusRepository.html#method_menuStructure", "name": "Devise\\Menus\\MenusRepository::menuStructure", "doc": "&quot;A simple way to view the menu structure\nnot in use by anything right now but here for\ntroubleshooting menus if we need to&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Menus", "fromLink": "Devise/Menus.html", "link": "Devise/Menus/MenusResponseHandler.html", "name": "Devise\\Menus\\MenusResponseHandler", "doc": "&quot;Class MenusResponseHandler is used to store and update menus\nand menu items in the database. There is likely a dvs_pages\ndatabase row pointing to these two methods.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Menus\\MenusResponseHandler", "fromLink": "Devise/Menus/MenusResponseHandler.html", "link": "Devise/Menus/MenusResponseHandler.html#method___construct", "name": "Devise\\Menus\\MenusResponseHandler::__construct", "doc": "&quot;Construct new response handler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusResponseHandler", "fromLink": "Devise/Menus/MenusResponseHandler.html", "link": "Devise/Menus/MenusResponseHandler.html#method_requestStore", "name": "Devise\\Menus\\MenusResponseHandler::requestStore", "doc": "&quot;Create a new menu then redirect to edit page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Menus\\MenusResponseHandler", "fromLink": "Devise/Menus/MenusResponseHandler.html", "link": "Devise/Menus/MenusResponseHandler.html#method_requestUpdate", "name": "Devise\\Menus\\MenusResponseHandler::requestUpdate", "doc": "&quot;Update a Menu&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Models\\Scaffolding", "fromLink": "Devise/Models/Scaffolding.html", "link": "Devise/Models/Scaffolding/MigrationScaffolding.html", "name": "Devise\\Models\\Scaffolding\\MigrationScaffolding", "doc": "&quot;Class MigrationScaffolding&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\MigrationScaffolding", "fromLink": "Devise/Models/Scaffolding/MigrationScaffolding.html", "link": "Devise/Models/Scaffolding/MigrationScaffolding.html#method___construct", "name": "Devise\\Models\\Scaffolding\\MigrationScaffolding::__construct", "doc": "&quot;Constructor - initialize and inject the framework&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\MigrationScaffolding", "fromLink": "Devise/Models/Scaffolding/MigrationScaffolding.html", "link": "Devise/Models/Scaffolding/MigrationScaffolding.html#method_buildAndRun", "name": "Devise\\Models\\Scaffolding\\MigrationScaffolding::buildAndRun", "doc": "&quot;The primary initialization for building migrations&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\MigrationScaffolding", "fromLink": "Devise/Models/Scaffolding/MigrationScaffolding.html", "link": "Devise/Models/Scaffolding/MigrationScaffolding.html#method_runMigration", "name": "Devise\\Models\\Scaffolding\\MigrationScaffolding::runMigration", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\MigrationScaffolding", "fromLink": "Devise/Models/Scaffolding/MigrationScaffolding.html", "link": "Devise/Models/Scaffolding/MigrationScaffolding.html#method_getMigrationTemplatePath", "name": "Devise\\Models\\Scaffolding\\MigrationScaffolding::getMigrationTemplatePath", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\MigrationScaffolding", "fromLink": "Devise/Models/Scaffolding/MigrationScaffolding.html", "link": "Devise/Models/Scaffolding/MigrationScaffolding.html#method_getTargetFilePath", "name": "Devise\\Models\\Scaffolding\\MigrationScaffolding::getTargetFilePath", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\MigrationScaffolding", "fromLink": "Devise/Models/Scaffolding/MigrationScaffolding.html", "link": "Devise/Models/Scaffolding/MigrationScaffolding.html#method_saveMigration", "name": "Devise\\Models\\Scaffolding\\MigrationScaffolding::saveMigration", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Models\\Scaffolding", "fromLink": "Devise/Models/Scaffolding.html", "link": "Devise/Models/Scaffolding/SanityChecksHelper.html", "name": "Devise\\Models\\Scaffolding\\SanityChecksHelper", "doc": "&quot;Class SanityChecksHelper&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\SanityChecksHelper", "fromLink": "Devise/Models/Scaffolding/SanityChecksHelper.html", "link": "Devise/Models/Scaffolding/SanityChecksHelper.html#method___construct", "name": "Devise\\Models\\Scaffolding\\SanityChecksHelper::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\SanityChecksHelper", "fromLink": "Devise/Models/Scaffolding/SanityChecksHelper.html", "link": "Devise/Models/Scaffolding/SanityChecksHelper.html#method_runSanityCheck", "name": "Devise\\Models\\Scaffolding\\SanityChecksHelper::runSanityCheck", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\SanityChecksHelper", "fromLink": "Devise/Models/Scaffolding/SanityChecksHelper.html", "link": "Devise/Models/Scaffolding/SanityChecksHelper.html#method_checkViewsDirectory", "name": "Devise\\Models\\Scaffolding\\SanityChecksHelper::checkViewsDirectory", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\SanityChecksHelper", "fromLink": "Devise/Models/Scaffolding/SanityChecksHelper.html", "link": "Devise/Models/Scaffolding/SanityChecksHelper.html#method_checkSrcDirectory", "name": "Devise\\Models\\Scaffolding\\SanityChecksHelper::checkSrcDirectory", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Models\\Scaffolding", "fromLink": "Devise/Models/Scaffolding.html", "link": "Devise/Models/Scaffolding/ScaffoldingManager.html", "name": "Devise\\Models\\Scaffolding\\ScaffoldingManager", "doc": "&quot;Class ScaffoldingManager&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\ScaffoldingManager", "fromLink": "Devise/Models/Scaffolding/ScaffoldingManager.html", "link": "Devise/Models/Scaffolding/ScaffoldingManager.html#method_makeScaffolding", "name": "Devise\\Models\\Scaffolding\\ScaffoldingManager::makeScaffolding", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\ScaffoldingManager", "fromLink": "Devise/Models/Scaffolding/ScaffoldingManager.html", "link": "Devise/Models/Scaffolding/ScaffoldingManager.html#method_interpretInputData", "name": "Devise\\Models\\Scaffolding\\ScaffoldingManager::interpretInputData", "doc": "&quot;Takes in input array and sets\/unsets data\naccording to form input.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Models\\Scaffolding", "fromLink": "Devise/Models/Scaffolding.html", "link": "Devise/Models/Scaffolding/ScaffoldingRepository.html", "name": "Devise\\Models\\Scaffolding\\ScaffoldingRepository", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\ScaffoldingRepository", "fromLink": "Devise/Models/Scaffolding/ScaffoldingRepository.html", "link": "Devise/Models/Scaffolding/ScaffoldingRepository.html#method_getModelFieldTypesList", "name": "Devise\\Models\\Scaffolding\\ScaffoldingRepository::getModelFieldTypesList", "doc": "&quot;Gets a list of field types for models&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\ScaffoldingRepository", "fromLink": "Devise/Models/Scaffolding/ScaffoldingRepository.html", "link": "Devise/Models/Scaffolding/ScaffoldingRepository.html#method_getModelFormTypesList", "name": "Devise\\Models\\Scaffolding\\ScaffoldingRepository::getModelFormTypesList", "doc": "&quot;Gets a list of form types&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Models\\Scaffolding", "fromLink": "Devise/Models/Scaffolding.html", "link": "Devise/Models/Scaffolding/ScaffoldingResponseHandler.html", "name": "Devise\\Models\\Scaffolding\\ScaffoldingResponseHandler", "doc": "&quot;Class ScaffoldingResponseHandler&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\ScaffoldingResponseHandler", "fromLink": "Devise/Models/Scaffolding/ScaffoldingResponseHandler.html", "link": "Devise/Models/Scaffolding/ScaffoldingResponseHandler.html#method___construct", "name": "Devise\\Models\\Scaffolding\\ScaffoldingResponseHandler::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\ScaffoldingResponseHandler", "fromLink": "Devise/Models/Scaffolding/ScaffoldingResponseHandler.html", "link": "Devise/Models/Scaffolding/ScaffoldingResponseHandler.html#method_requestCreateNewModel", "name": "Devise\\Models\\Scaffolding\\ScaffoldingResponseHandler::requestCreateNewModel", "doc": "&quot;Request a new page be created&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Models\\Scaffolding", "fromLink": "Devise/Models/Scaffolding.html", "link": "Devise/Models/Scaffolding/SeederScaffolding.html", "name": "Devise\\Models\\Scaffolding\\SeederScaffolding", "doc": "&quot;Class SeederScaffolding&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\SeederScaffolding", "fromLink": "Devise/Models/Scaffolding/SeederScaffolding.html", "link": "Devise/Models/Scaffolding/SeederScaffolding.html#method___construct", "name": "Devise\\Models\\Scaffolding\\SeederScaffolding::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\SeederScaffolding", "fromLink": "Devise/Models/Scaffolding/SeederScaffolding.html", "link": "Devise/Models/Scaffolding/SeederScaffolding.html#method_build", "name": "Devise\\Models\\Scaffolding\\SeederScaffolding::build", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\SeederScaffolding", "fromLink": "Devise/Models/Scaffolding/SeederScaffolding.html", "link": "Devise/Models/Scaffolding/SeederScaffolding.html#method_getTemplatePath", "name": "Devise\\Models\\Scaffolding\\SeederScaffolding::getTemplatePath", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\SeederScaffolding", "fromLink": "Devise/Models/Scaffolding/SeederScaffolding.html", "link": "Devise/Models/Scaffolding/SeederScaffolding.html#method_getDatabaseSeederPath", "name": "Devise\\Models\\Scaffolding\\SeederScaffolding::getDatabaseSeederPath", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\SeederScaffolding", "fromLink": "Devise/Models/Scaffolding/SeederScaffolding.html", "link": "Devise/Models/Scaffolding/SeederScaffolding.html#method_getTargetFilePath", "name": "Devise\\Models\\Scaffolding\\SeederScaffolding::getTargetFilePath", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\SeederScaffolding", "fromLink": "Devise/Models/Scaffolding/SeederScaffolding.html", "link": "Devise/Models/Scaffolding/SeederScaffolding.html#method_saveSeed", "name": "Devise\\Models\\Scaffolding\\SeederScaffolding::saveSeed", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Models\\Scaffolding", "fromLink": "Devise/Models/Scaffolding.html", "link": "Devise/Models/Scaffolding/TemplateScaffolding.html", "name": "Devise\\Models\\Scaffolding\\TemplateScaffolding", "doc": "&quot;Class TemplateScaffolding&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\TemplateScaffolding", "fromLink": "Devise/Models/Scaffolding/TemplateScaffolding.html", "link": "Devise/Models/Scaffolding/TemplateScaffolding.html#method___construct", "name": "Devise\\Models\\Scaffolding\\TemplateScaffolding::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\TemplateScaffolding", "fromLink": "Devise/Models/Scaffolding/TemplateScaffolding.html", "link": "Devise/Models/Scaffolding/TemplateScaffolding.html#method_insertTemplateConfiguration", "name": "Devise\\Models\\Scaffolding\\TemplateScaffolding::insertTemplateConfiguration", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\TemplateScaffolding", "fromLink": "Devise/Models/Scaffolding/TemplateScaffolding.html", "link": "Devise/Models/Scaffolding/TemplateScaffolding.html#method_convertTemplatesAndSave", "name": "Devise\\Models\\Scaffolding\\TemplateScaffolding::convertTemplatesAndSave", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Models\\Scaffolding\\Types", "fromLink": "Devise/Models/Scaffolding/Types.html", "link": "Devise/Models/Scaffolding/Types/BaseScaffolding.html", "name": "Devise\\Models\\Scaffolding\\Types\\BaseScaffolding", "doc": "&quot;Class BaseScaffolding&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\Types\\BaseScaffolding", "fromLink": "Devise/Models/Scaffolding/Types/BaseScaffolding.html", "link": "Devise/Models/Scaffolding/Types/BaseScaffolding.html#method___construct", "name": "Devise\\Models\\Scaffolding\\Types\\BaseScaffolding::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Models\\Scaffolding\\Types\\BaseScaffolding", "fromLink": "Devise/Models/Scaffolding/Types/BaseScaffolding.html", "link": "Devise/Models/Scaffolding/Types/BaseScaffolding.html#method_scaffold", "name": "Devise\\Models\\Scaffolding\\Types\\BaseScaffolding::scaffold", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Models\\Scaffolding\\Types", "fromLink": "Devise/Models/Scaffolding/Types.html", "link": "Devise/Models/Scaffolding/Types/CrudScaffolding.html", "name": "Devise\\Models\\Scaffolding\\Types\\CrudScaffolding", "doc": "&quot;Class CrudScaffolding&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/ApiPagesManager.html", "name": "Devise\\Pages\\ApiPagesManager", "doc": "&quot;Class ApiPagesManager manages the creating of new pages,\nupdating pages&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\ApiPagesManager", "fromLink": "Devise/Pages/ApiPagesManager.html", "link": "Devise/Pages/ApiPagesManager.html#method_createNewPage", "name": "Devise\\Pages\\ApiPagesManager::createNewPage", "doc": "&quot;Validates and creates a page with the given input&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/ApiPagesRepository.html", "name": "Devise\\Pages\\ApiPagesRepository", "doc": "&quot;Class ApiPagesRepository is used to retrieve DvsPage models of Function type&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\ApiPagesRepository", "fromLink": "Devise/Pages/ApiPagesRepository.html", "link": "Devise/Pages/ApiPagesRepository.html#method___construct", "name": "Devise\\Pages\\ApiPagesRepository::__construct", "doc": "&quot;Create a new ApiPagesRepository instance.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\ApiPagesRepository", "fromLink": "Devise/Pages/ApiPagesRepository.html", "link": "Devise/Pages/ApiPagesRepository.html#method_find", "name": "Devise\\Pages\\ApiPagesRepository::find", "doc": "&quot;finds a record by it&#039;s id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\ApiPagesRepository", "fromLink": "Devise/Pages/ApiPagesRepository.html", "link": "Devise/Pages/ApiPagesRepository.html#method_pages", "name": "Devise\\Pages\\ApiPagesRepository::pages", "doc": "&quot;Finds all &#039;Funciton&#039; type pages&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/ApiPagesResponseHandler.html", "name": "Devise\\Pages\\ApiPagesResponseHandler", "doc": "&quot;Response handler takes care of creating,updating, destroying&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\ApiPagesResponseHandler", "fromLink": "Devise/Pages/ApiPagesResponseHandler.html", "link": "Devise/Pages/ApiPagesResponseHandler.html#method___construct", "name": "Devise\\Pages\\ApiPagesResponseHandler::__construct", "doc": "&quot;Construct a new PageResponseHandler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\ApiPagesResponseHandler", "fromLink": "Devise/Pages/ApiPagesResponseHandler.html", "link": "Devise/Pages/ApiPagesResponseHandler.html#method_requestCreateNewPage", "name": "Devise\\Pages\\ApiPagesResponseHandler::requestCreateNewPage", "doc": "&quot;Request a new page be created&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\ApiPagesResponseHandler", "fromLink": "Devise/Pages/ApiPagesResponseHandler.html", "link": "Devise/Pages/ApiPagesResponseHandler.html#method_requestUpdatePage", "name": "Devise\\Pages\\ApiPagesResponseHandler::requestUpdatePage", "doc": "&quot;Request page be updated with given input&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\ApiPagesResponseHandler", "fromLink": "Devise/Pages/ApiPagesResponseHandler.html", "link": "Devise/Pages/ApiPagesResponseHandler.html#method_requestDestroyPage", "name": "Devise\\Pages\\ApiPagesResponseHandler::requestDestroyPage", "doc": "&quot;Request the page be deleted from database&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Collections", "fromLink": "Devise/Pages/Collections.html", "link": "Devise/Pages/Collections/CollectionFields.html", "name": "Devise\\Pages\\Collections\\CollectionFields", "doc": "&quot;This classes purpose is to act as a container\nfor fields on the collection level. A collection\ncan have multiple fields, e.g.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionFields", "fromLink": "Devise/Pages/Collections/CollectionFields.html", "link": "Devise/Pages/Collections/CollectionFields.html#method___construct", "name": "Devise\\Pages\\Collections\\CollectionFields::__construct", "doc": "&quot;Create a new collection fields object\nfrom an array of fields&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionFields", "fromLink": "Devise/Pages/Collections/CollectionFields.html", "link": "Devise/Pages/Collections/CollectionFields.html#method___get", "name": "Devise\\Pages\\Collections\\CollectionFields::__get", "doc": "&quot;This magic method is used whenever we\nattempt to access a field key that doesn&#039;t\nexist on this CollectionFields container\nso that we don&#039;t return null (in case that\nwe are chaining things)&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Collections", "fromLink": "Devise/Pages/Collections.html", "link": "Devise/Pages/Collections/CollectionFieldsFactory.html", "name": "Devise\\Pages\\Collections\\CollectionFieldsFactory", "doc": "&quot;Collection fields are objects that allow\nus to traverse the keys in that collection.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionFieldsFactory", "fromLink": "Devise/Pages/Collections/CollectionFieldsFactory.html", "link": "Devise/Pages/Collections/CollectionFieldsFactory.html#method___construct", "name": "Devise\\Pages\\Collections\\CollectionFieldsFactory::__construct", "doc": "&quot;Create a new factory&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionFieldsFactory", "fromLink": "Devise/Pages/Collections/CollectionFieldsFactory.html", "link": "Devise/Pages/Collections/CollectionFieldsFactory.html#method_createFromCollectionInstance", "name": "Devise\\Pages\\Collections\\CollectionFieldsFactory::createFromCollectionInstance", "doc": "&quot;Creates collection fields object from a collection\ninstance that we pulled from the database (those will\nhave fields associated with them too)&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Collections", "fromLink": "Devise/Pages/Collections.html", "link": "Devise/Pages/Collections/CollectionsManager.html", "name": "Devise\\Pages\\Collections\\CollectionsManager", "doc": "&quot;Manage collections in the database by creating, updating\nand removing them.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionsManager", "fromLink": "Devise/Pages/Collections/CollectionsManager.html", "link": "Devise/Pages/Collections/CollectionsManager.html#method___construct", "name": "Devise\\Pages\\Collections\\CollectionsManager::__construct", "doc": "&quot;Create a new collections manager object&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionsManager", "fromLink": "Devise/Pages/Collections/CollectionsManager.html", "link": "Devise/Pages/Collections/CollectionsManager.html#method_createNewInstance", "name": "Devise\\Pages\\Collections\\CollectionsManager::createNewInstance", "doc": "&quot;Create a new collection instance&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionsManager", "fromLink": "Devise/Pages/Collections/CollectionsManager.html", "link": "Devise/Pages/Collections/CollectionsManager.html#method_createNewInstanceField", "name": "Devise\\Pages\\Collections\\CollectionsManager::createNewInstanceField", "doc": "&quot;[createNewInstanceField description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionsManager", "fromLink": "Devise/Pages/Collections/CollectionsManager.html", "link": "Devise/Pages/Collections/CollectionsManager.html#method_updateInstanceSort", "name": "Devise\\Pages\\Collections\\CollectionsManager::updateInstanceSort", "doc": "&quot;Updates the instance with input data&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionsManager", "fromLink": "Devise/Pages/Collections/CollectionsManager.html", "link": "Devise/Pages/Collections/CollectionsManager.html#method_updateInstanceName", "name": "Devise\\Pages\\Collections\\CollectionsManager::updateInstanceName", "doc": "&quot;Update the collection instance name&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionsManager", "fromLink": "Devise/Pages/Collections/CollectionsManager.html", "link": "Devise/Pages/Collections/CollectionsManager.html#method_removeInstance", "name": "Devise\\Pages\\Collections\\CollectionsManager::removeInstance", "doc": "&quot;Remove instance from database&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Collections", "fromLink": "Devise/Pages/Collections.html", "link": "Devise/Pages/Collections/CollectionsRepository.html", "name": "Devise\\Pages\\Collections\\CollectionsRepository", "doc": "&quot;Retreives collection instances and sets and fields for us.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionsRepository", "fromLink": "Devise/Pages/Collections/CollectionsRepository.html", "link": "Devise/Pages/Collections/CollectionsRepository.html#method___construct", "name": "Devise\\Pages\\Collections\\CollectionsRepository::__construct", "doc": "&quot;Construct a new repository with all the dependencies&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionsRepository", "fromLink": "Devise/Pages/Collections/CollectionsRepository.html", "link": "Devise/Pages/Collections/CollectionsRepository.html#method_getInstances", "name": "Devise\\Pages\\Collections\\CollectionsRepository::getInstances", "doc": "&quot;This is used by the \/admin\/pages\/{pageVersionId}\/collections\/{collectionSetId}\/instances slug&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionsRepository", "fromLink": "Devise/Pages/Collections/CollectionsRepository.html", "link": "Devise/Pages/Collections/CollectionsRepository.html#method_findCollectionsForPageVersionId", "name": "Devise\\Pages\\Collections\\CollectionsRepository::findCollectionsForPageVersionId", "doc": "&quot;When we only have the pageVersionId we can use this function\nas a proxy to findCollectionsForPageVersion&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionsRepository", "fromLink": "Devise/Pages/Collections/CollectionsRepository.html", "link": "Devise/Pages/Collections/CollectionsRepository.html#method_findCollectionsForPageVersion", "name": "Devise\\Pages\\Collections\\CollectionsRepository::findCollectionsForPageVersion", "doc": "&quot;Get the list of collections for this page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\CollectionsRepository", "fromLink": "Devise/Pages/Collections/CollectionsRepository.html", "link": "Devise/Pages/Collections/CollectionsRepository.html#method_findCollectionInstancesForCollectionSetIdAndPageVersionId", "name": "Devise\\Pages\\Collections\\CollectionsRepository::findCollectionInstancesForCollectionSetIdAndPageVersionId", "doc": "&quot;Get the instances + fields for this collection set \/ page_version combo&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Collections", "fromLink": "Devise/Pages/Collections.html", "link": "Devise/Pages/Collections/ResponseHandler.html", "name": "Devise\\Pages\\Collections\\ResponseHandler", "doc": "&quot;Handle responses for collection instances&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Collections\\ResponseHandler", "fromLink": "Devise/Pages/Collections/ResponseHandler.html", "link": "Devise/Pages/Collections/ResponseHandler.html#method___construct", "name": "Devise\\Pages\\Collections\\ResponseHandler::__construct", "doc": "&quot;Construct a new Response Handler used by dvs_pages&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\ResponseHandler", "fromLink": "Devise/Pages/Collections/ResponseHandler.html", "link": "Devise/Pages/Collections/ResponseHandler.html#method_requestStoreInstance", "name": "Devise\\Pages\\Collections\\ResponseHandler::requestStoreInstance", "doc": "&quot;Stores the instance with given pageversion and collection set ids&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\ResponseHandler", "fromLink": "Devise/Pages/Collections/ResponseHandler.html", "link": "Devise/Pages/Collections/ResponseHandler.html#method_updateSortOrder", "name": "Devise\\Pages\\Collections\\ResponseHandler::updateSortOrder", "doc": "&quot;Updates the sort order for a given instance&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\ResponseHandler", "fromLink": "Devise/Pages/Collections/ResponseHandler.html", "link": "Devise/Pages/Collections/ResponseHandler.html#method_renameInstance", "name": "Devise\\Pages\\Collections\\ResponseHandler::renameInstance", "doc": "&quot;Renames the instance with a better, faster, more improved name.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\ResponseHandler", "fromLink": "Devise/Pages/Collections/ResponseHandler.html", "link": "Devise/Pages/Collections/ResponseHandler.html#method_requestDeleteInstance", "name": "Devise\\Pages\\Collections\\ResponseHandler::requestDeleteInstance", "doc": "&quot;Remove the collection instance from the database&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Collections\\ResponseHandler", "fromLink": "Devise/Pages/Collections/ResponseHandler.html", "link": "Devise/Pages/Collections/ResponseHandler.html#method_updateCollectionInstanceField", "name": "Devise\\Pages\\Collections\\ResponseHandler::updateCollectionInstanceField", "doc": "&quot;Update the collection instance field&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Docs", "fromLink": "Devise/Pages/Docs.html", "link": "Devise/Pages/Docs/Creator.html", "name": "Devise\\Pages\\Docs\\Creator", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Docs\\Creator", "fromLink": "Devise/Pages/Docs/Creator.html", "link": "Devise/Pages/Docs/Creator.html#method___construct", "name": "Devise\\Pages\\Docs\\Creator::__construct", "doc": "&quot;[__construct description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Docs\\Creator", "fromLink": "Devise/Pages/Docs/Creator.html", "link": "Devise/Pages/Docs/Creator.html#method_deviseDocs", "name": "Devise\\Pages\\Docs\\Creator::deviseDocs", "doc": "&quot;Returns devise docs for the sidebar for this view path&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Docs", "fromLink": "Devise/Pages/Docs.html", "link": "Devise/Pages/Docs/LiveSpan.html", "name": "Devise\\Pages\\Docs\\LiveSpan", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Docs\\LiveSpan", "fromLink": "Devise/Pages/Docs/LiveSpan.html", "link": "Devise/Pages/Docs/LiveSpan.html#method___construct", "name": "Devise\\Pages\\Docs\\LiveSpan::__construct", "doc": "&quot;[__construct description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Docs\\LiveSpan", "fromLink": "Devise/Pages/Docs/LiveSpan.html", "link": "Devise/Pages/Docs/LiveSpan.html#method_replace", "name": "Devise\\Pages\\Docs\\LiveSpan::replace", "doc": "&quot;[replace description]&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Fields", "fromLink": "Devise/Pages/Fields.html", "link": "Devise/Pages/Fields/DuplicateFieldKeyException.html", "name": "Devise\\Pages\\Fields\\DuplicateFieldKeyException", "doc": "&quot;Whenever we see a duplicate field key on a page\nthrow an exception for the developer so they can fix it.&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Pages\\Fields", "fromLink": "Devise/Pages/Fields.html", "link": "Devise/Pages/Fields/DvsMagicMode.html", "name": "Devise\\Pages\\Fields\\DvsMagicMode", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Fields\\DvsMagicMode", "fromLink": "Devise/Pages/Fields/DvsMagicMode.html", "link": "Devise/Pages/Fields/DvsMagicMode.html#method_enable", "name": "Devise\\Pages\\Fields\\DvsMagicMode::enable", "doc": "&quot;[enable description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\DvsMagicMode", "fromLink": "Devise/Pages/Fields/DvsMagicMode.html", "link": "Devise/Pages/Fields/DvsMagicMode.html#method_disable", "name": "Devise\\Pages\\Fields\\DvsMagicMode::disable", "doc": "&quot;[disable description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\DvsMagicMode", "fromLink": "Devise/Pages/Fields/DvsMagicMode.html", "link": "Devise/Pages/Fields/DvsMagicMode.html#method_enabled", "name": "Devise\\Pages\\Fields\\DvsMagicMode::enabled", "doc": "&quot;[enabled description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\DvsMagicMode", "fromLink": "Devise/Pages/Fields/DvsMagicMode.html", "link": "Devise/Pages/Fields/DvsMagicMode.html#method_disabled", "name": "Devise\\Pages\\Fields\\DvsMagicMode::disabled", "doc": "&quot;[disabled description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\DvsMagicMode", "fromLink": "Devise/Pages/Fields/DvsMagicMode.html", "link": "Devise/Pages/Fields/DvsMagicMode.html#method_live", "name": "Devise\\Pages\\Fields\\DvsMagicMode::live", "doc": "&quot;[live description]&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Fields", "fromLink": "Devise/Pages/Fields.html", "link": "Devise/Pages/Fields/FieldManager.html", "name": "Devise\\Pages\\Fields\\FieldManager", "doc": "&quot;A field manager has the responsibilty of managing fields in\nthe database.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldManager", "fromLink": "Devise/Pages/Fields/FieldManager.html", "link": "Devise/Pages/Fields/FieldManager.html#method___construct", "name": "Devise\\Pages\\Fields\\FieldManager::__construct", "doc": "&quot;Construct a new Field Manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldManager", "fromLink": "Devise/Pages/Fields/FieldManager.html", "link": "Devise/Pages/Fields/FieldManager.html#method_updateField", "name": "Devise\\Pages\\Fields\\FieldManager::updateField", "doc": "&quot;Updates the field&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldManager", "fromLink": "Devise/Pages/Fields/FieldManager.html", "link": "Devise/Pages/Fields/FieldManager.html#method_resetField", "name": "Devise\\Pages\\Fields\\FieldManager::resetField", "doc": "&quot;Reset field values&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldManager", "fromLink": "Devise/Pages/Fields/FieldManager.html", "link": "Devise/Pages/Fields/FieldManager.html#method_markNoContentRequested", "name": "Devise\\Pages\\Fields\\FieldManager::markNoContentRequested", "doc": "&quot;Sets a series of fields content requested to false&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Fields", "fromLink": "Devise/Pages/Fields.html", "link": "Devise/Pages/Fields/FieldValue.html", "name": "Devise\\Pages\\Fields\\FieldValue", "doc": "&quot;Field value is an object that holds json\nvalues for a DvsField model&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldValue", "fromLink": "Devise/Pages/Fields/FieldValue.html", "link": "Devise/Pages/Fields/FieldValue.html#method___construct", "name": "Devise\\Pages\\Fields\\FieldValue::__construct", "doc": "&quot;Create a new FieldValue object from json string&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldValue", "fromLink": "Devise/Pages/Fields/FieldValue.html", "link": "Devise/Pages/Fields/FieldValue.html#method___toString", "name": "Devise\\Pages\\Fields\\FieldValue::__toString", "doc": "&quot;Convert to a empty string to avoid\nnull pointer exceptions&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldValue", "fromLink": "Devise/Pages/Fields/FieldValue.html", "link": "Devise/Pages/Fields/FieldValue.html#method___get", "name": "Devise\\Pages\\Fields\\FieldValue::__get", "doc": "&quot;Avoids null pointer exceptions by\ntreating this like the empty string\nwe only ever reach this magical method\nwhen we have attempted to fetch a key\nthat does not exist on this FieldValue object&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldValue", "fromLink": "Devise/Pages/Fields/FieldValue.html", "link": "Devise/Pages/Fields/FieldValue.html#method_get", "name": "Devise\\Pages\\Fields\\FieldValue::get", "doc": "&quot;Gets this field with this name, returns\ndefault if nothing is found.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldValue", "fromLink": "Devise/Pages/Fields/FieldValue.html", "link": "Devise/Pages/Fields/FieldValue.html#method_override", "name": "Devise\\Pages\\Fields\\FieldValue::override", "doc": "&quot;Overrides this data with the new\ninput array&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldValue", "fromLink": "Devise/Pages/Fields/FieldValue.html", "link": "Devise/Pages/Fields/FieldValue.html#method_merge", "name": "Devise\\Pages\\Fields\\FieldValue::merge", "doc": "&quot;Merges in the array data into the\nfield object json&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldValue", "fromLink": "Devise/Pages/Fields/FieldValue.html", "link": "Devise/Pages/Fields/FieldValue.html#method_toJSON", "name": "Devise\\Pages\\Fields\\FieldValue::toJSON", "doc": "&quot;Returns this object as json string&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldValue", "fromLink": "Devise/Pages/Fields/FieldValue.html", "link": "Devise/Pages/Fields/FieldValue.html#method_toArray", "name": "Devise\\Pages\\Fields\\FieldValue::toArray", "doc": "&quot;Returns this object as array&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldValue", "fromLink": "Devise/Pages/Fields/FieldValue.html", "link": "Devise/Pages/Fields/FieldValue.html#method___call", "name": "Devise\\Pages\\Fields\\FieldValue::__call", "doc": "&quot;Allows us to set default values on a key\nif we do not have that key set in this\nFieldValue object&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Fields", "fromLink": "Devise/Pages/Fields.html", "link": "Devise/Pages/Fields/FieldsRepository.html", "name": "Devise\\Pages\\Fields\\FieldsRepository", "doc": "&quot;Fields repository allows us to retrieve fields\nthat belong to page versions and keys and have been\ndeleted. We also can find global fields with this\nrepository.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsRepository", "fromLink": "Devise/Pages/Fields/FieldsRepository.html", "link": "Devise/Pages/Fields/FieldsRepository.html#method___construct", "name": "Devise\\Pages\\Fields\\FieldsRepository::__construct", "doc": "&quot;Construct a new FieldsRepository&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsRepository", "fromLink": "Devise/Pages/Fields/FieldsRepository.html", "link": "Devise/Pages/Fields/FieldsRepository.html#method_findFieldByKeyAndPageVersion", "name": "Devise\\Pages\\Fields\\FieldsRepository::findFieldByKeyAndPageVersion", "doc": "&quot;Find existing page field given key and pageId&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsRepository", "fromLink": "Devise/Pages/Fields/FieldsRepository.html", "link": "Devise/Pages/Fields/FieldsRepository.html#method_findTrashedFieldByKeyAndPageVersion", "name": "Devise\\Pages\\Fields\\FieldsRepository::findTrashedFieldByKeyAndPageVersion", "doc": "&quot;Find existing page field (only if it has been trashed)&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsRepository", "fromLink": "Devise/Pages/Fields/FieldsRepository.html", "link": "Devise/Pages/Fields/FieldsRepository.html#method_findTrashedGlobalFieldByKeyAndLanguage", "name": "Devise\\Pages\\Fields\\FieldsRepository::findTrashedGlobalFieldByKeyAndLanguage", "doc": "&quot;Find existing global field (only if it has been trashed)&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsRepository", "fromLink": "Devise/Pages/Fields/FieldsRepository.html", "link": "Devise/Pages/Fields/FieldsRepository.html#method_findFieldById", "name": "Devise\\Pages\\Fields\\FieldsRepository::findFieldById", "doc": "&quot;Find the field by id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsRepository", "fromLink": "Devise/Pages/Fields/FieldsRepository.html", "link": "Devise/Pages/Fields/FieldsRepository.html#method_findFieldByIdAndScope", "name": "Devise\\Pages\\Fields\\FieldsRepository::findFieldByIdAndScope", "doc": "&quot;Find a field by it&#039;s id and scope (page or global)&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsRepository", "fromLink": "Devise/Pages/Fields/FieldsRepository.html", "link": "Devise/Pages/Fields/FieldsRepository.html#method_findTrashedFieldByIdAndScope", "name": "Devise\\Pages\\Fields\\FieldsRepository::findTrashedFieldByIdAndScope", "doc": "&quot;Find a field by it&#039;s scope and included fields that have been deleted&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsRepository", "fromLink": "Devise/Pages/Fields/FieldsRepository.html", "link": "Devise/Pages/Fields/FieldsRepository.html#method_findFieldByGlobalKeyAndLanguage", "name": "Devise\\Pages\\Fields\\FieldsRepository::findFieldByGlobalKeyAndLanguage", "doc": "&quot;Find a field by it&#039;s global key and language id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsRepository", "fromLink": "Devise/Pages/Fields/FieldsRepository.html", "link": "Devise/Pages/Fields/FieldsRepository.html#method_findContentRequestedFieldsList", "name": "Devise\\Pages\\Fields\\FieldsRepository::findContentRequestedFieldsList", "doc": "&quot;Find all fields where content requested is true for given\npage version id and builds a list of field keys&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Fields", "fromLink": "Devise/Pages/Fields.html", "link": "Devise/Pages/Fields/FieldsResponseHandler.html", "name": "Devise\\Pages\\Fields\\FieldsResponseHandler", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsResponseHandler", "fromLink": "Devise/Pages/Fields/FieldsResponseHandler.html", "link": "Devise/Pages/Fields/FieldsResponseHandler.html#method___construct", "name": "Devise\\Pages\\Fields\\FieldsResponseHandler::__construct", "doc": "&quot;Construct new response handler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsResponseHandler", "fromLink": "Devise/Pages/Fields/FieldsResponseHandler.html", "link": "Devise/Pages/Fields/FieldsResponseHandler.html#method_requestUpdate", "name": "Devise\\Pages\\Fields\\FieldsResponseHandler::requestUpdate", "doc": "&quot;Update field, creates a new version of the field\nthis returns json&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\FieldsResponseHandler", "fromLink": "Devise/Pages/Fields/FieldsResponseHandler.html", "link": "Devise/Pages/Fields/FieldsResponseHandler.html#method_requestReset", "name": "Devise\\Pages\\Fields\\FieldsResponseHandler::requestReset", "doc": "&quot;Resets a fields values&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Fields\\Handlers", "fromLink": "Devise/Pages/Fields/Handlers.html", "link": "Devise/Pages/Fields/Handlers/AudioFieldUpdated.html", "name": "Devise\\Pages\\Fields\\Handlers\\AudioFieldUpdated", "doc": "&quot;When the video field is updated we will\ncall this class to handle the encoding part\nThis should be registered in the Events of\nlaravel whenever the PagesServiceProvider starts&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Fields\\Handlers\\AudioFieldUpdated", "fromLink": "Devise/Pages/Fields/Handlers/AudioFieldUpdated.html", "link": "Devise/Pages/Fields/Handlers/AudioFieldUpdated.html#method___construct", "name": "Devise\\Pages\\Fields\\Handlers\\AudioFieldUpdated::__construct", "doc": "&quot;Construct a new VideoFieldUpdated instance&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\Handlers\\AudioFieldUpdated", "fromLink": "Devise/Pages/Fields/Handlers/AudioFieldUpdated.html", "link": "Devise/Pages/Fields/Handlers/AudioFieldUpdated.html#method_handle", "name": "Devise\\Pages\\Fields\\Handlers\\AudioFieldUpdated::handle", "doc": "&quot;This is called anytime after we update a video field\nin devise&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Fields\\Handlers", "fromLink": "Devise/Pages/Fields/Handlers.html", "link": "Devise/Pages/Fields/Handlers/ImageFieldUpdated.html", "name": "Devise\\Pages\\Fields\\Handlers\\ImageFieldUpdated", "doc": "&quot;This class should be registered in a service provider\nfor PagesServiceProvider. It is called anytime a\nfield with type \&quot;image\&quot; is updated. We do this so we\ncan hook into the updated event and then create media\nversions and thumbnails for this image field&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Fields\\Handlers\\ImageFieldUpdated", "fromLink": "Devise/Pages/Fields/Handlers/ImageFieldUpdated.html", "link": "Devise/Pages/Fields/Handlers/ImageFieldUpdated.html#method___construct", "name": "Devise\\Pages\\Fields\\Handlers\\ImageFieldUpdated::__construct", "doc": "&quot;Constructs a new Image field updated event handler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\Handlers\\ImageFieldUpdated", "fromLink": "Devise/Pages/Fields/Handlers/ImageFieldUpdated.html", "link": "Devise/Pages/Fields/Handlers/ImageFieldUpdated.html#method_handle", "name": "Devise\\Pages\\Fields\\Handlers\\ImageFieldUpdated::handle", "doc": "&quot;This is called anytime after we update an image field\nin devise&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Fields\\Handlers", "fromLink": "Devise/Pages/Fields/Handlers.html", "link": "Devise/Pages/Fields/Handlers/VideoFieldUpdated.html", "name": "Devise\\Pages\\Fields\\Handlers\\VideoFieldUpdated", "doc": "&quot;When the video field is updated we will\ncall this class to handle the encoding part\nThis should be registered in the Events of\nlaravel whenever the PagesServiceProvider starts&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Fields\\Handlers\\VideoFieldUpdated", "fromLink": "Devise/Pages/Fields/Handlers/VideoFieldUpdated.html", "link": "Devise/Pages/Fields/Handlers/VideoFieldUpdated.html#method___construct", "name": "Devise\\Pages\\Fields\\Handlers\\VideoFieldUpdated::__construct", "doc": "&quot;Construct a new VideoFieldUpdated instance&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\Handlers\\VideoFieldUpdated", "fromLink": "Devise/Pages/Fields/Handlers/VideoFieldUpdated.html", "link": "Devise/Pages/Fields/Handlers/VideoFieldUpdated.html#method_handle", "name": "Devise\\Pages\\Fields\\Handlers\\VideoFieldUpdated::handle", "doc": "&quot;This is called anytime after we update a video field\nin devise&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Fields", "fromLink": "Devise/Pages/Fields.html", "link": "Devise/Pages/Fields/LiveFieldValue.html", "name": "Devise\\Pages\\Fields\\LiveFieldValue", "doc": "&quot;Field value is an object that holds json\nvalues for a DvsField model&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method___construct", "name": "Devise\\Pages\\Fields\\LiveFieldValue::__construct", "doc": "&quot;Create a new FieldValue object from json string&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method___id", "name": "Devise\\Pages\\Fields\\LiveFieldValue::__id", "doc": "&quot;[__id description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method___type", "name": "Devise\\Pages\\Fields\\LiveFieldValue::__type", "doc": "&quot;[__type description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method___get", "name": "Devise\\Pages\\Fields\\LiveFieldValue::__get", "doc": "&quot;Avoids null pointer exceptions by\ntreating this like the empty string\nwe only ever reach this magical method\nwhen we have attempted to fetch a key\nthat does not exist on this FieldValue object&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method___call", "name": "Devise\\Pages\\Fields\\LiveFieldValue::__call", "doc": "&quot;Allows us to set default values on a key\nif we do not have that key set in this\nFieldValue object&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method___toString", "name": "Devise\\Pages\\Fields\\LiveFieldValue::__toString", "doc": "&quot;This thing is just a string.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method_get", "name": "Devise\\Pages\\Fields\\LiveFieldValue::get", "doc": "&quot;Gets this field with this name, returns\ndefault if nothing is found.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method_override", "name": "Devise\\Pages\\Fields\\LiveFieldValue::override", "doc": "&quot;Overrides this data with the new\ninput array&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method_merge", "name": "Devise\\Pages\\Fields\\LiveFieldValue::merge", "doc": "&quot;Merges in the array data into the\nfield object json&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method_toJSON", "name": "Devise\\Pages\\Fields\\LiveFieldValue::toJSON", "doc": "&quot;Returns this object as json string&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method_toArray", "name": "Devise\\Pages\\Fields\\LiveFieldValue::toArray", "doc": "&quot;Returns this object as array&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method_extract", "name": "Devise\\Pages\\Fields\\LiveFieldValue::extract", "doc": "&quot;This extracts the variables so they may be used.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Fields\\LiveFieldValue", "fromLink": "Devise/Pages/Fields/LiveFieldValue.html", "link": "Devise/Pages/Fields/LiveFieldValue.html#method_unextract", "name": "Devise\\Pages\\Fields\\LiveFieldValue::unextract", "doc": "&quot;Un extracts all the keys on this thing\ncould be useful if we need to undo an extract&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter", "fromLink": "Devise/Pages/Interpreter.html", "link": "Devise/Pages/Interpreter/BladeEngineCompiler.html", "name": "Devise\\Pages\\Interpreter\\BladeEngineCompiler", "doc": "&quot;This class merely decorates the another compiler\nand thus giving us the extra functionality we need\nto work properly.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\BladeEngineCompiler", "fromLink": "Devise/Pages/Interpreter/BladeEngineCompiler.html", "link": "Devise/Pages/Interpreter/BladeEngineCompiler.html#method___construct", "name": "Devise\\Pages\\Interpreter\\BladeEngineCompiler::__construct", "doc": "&quot;Construct a new blade compiler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\BladeEngineCompiler", "fromLink": "Devise/Pages/Interpreter/BladeEngineCompiler.html", "link": "Devise/Pages/Interpreter/BladeEngineCompiler.html#method_getCompiledPath", "name": "Devise\\Pages\\Interpreter\\BladeEngineCompiler::getCompiledPath", "doc": "&quot;Get the path to the compiled version of a view.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\BladeEngineCompiler", "fromLink": "Devise/Pages/Interpreter/BladeEngineCompiler.html", "link": "Devise/Pages/Interpreter/BladeEngineCompiler.html#method_isExpired", "name": "Devise\\Pages\\Interpreter\\BladeEngineCompiler::isExpired", "doc": "&quot;Determine if the given view is expired.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\BladeEngineCompiler", "fromLink": "Devise/Pages/Interpreter/BladeEngineCompiler.html", "link": "Devise/Pages/Interpreter/BladeEngineCompiler.html#method_compile", "name": "Devise\\Pages\\Interpreter\\BladeEngineCompiler::compile", "doc": "&quot;Compile the view at the given path.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\BladeEngineCompiler", "fromLink": "Devise/Pages/Interpreter/BladeEngineCompiler.html", "link": "Devise/Pages/Interpreter/BladeEngineCompiler.html#method_extend", "name": "Devise\\Pages\\Interpreter\\BladeEngineCompiler::extend", "doc": "&quot;[extend description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\BladeEngineCompiler", "fromLink": "Devise/Pages/Interpreter/BladeEngineCompiler.html", "link": "Devise/Pages/Interpreter/BladeEngineCompiler.html#method___call", "name": "Devise\\Pages\\Interpreter\\BladeEngineCompiler::__call", "doc": "&quot;Any calls made we proxy to the underlying compiler&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter", "fromLink": "Devise/Pages/Interpreter.html", "link": "Devise/Pages/Interpreter/DeviseCompiler.html", "name": "Devise\\Pages\\Interpreter\\DeviseCompiler", "doc": "&quot;purpose of this class is to add placeholder tags\nand also rename devise tags and lastly append on\nApp::make(&#039;dvsPageData&#039;)-&gt;bindings for devise tags,\ncollections, models and model creators&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DeviseCompiler", "fromLink": "Devise/Pages/Interpreter/DeviseCompiler.html", "link": "Devise/Pages/Interpreter/DeviseCompiler.html#method_compile", "name": "Devise\\Pages\\Interpreter\\DeviseCompiler::compile", "doc": "&quot;Compile the view with devise code in it&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter", "fromLink": "Devise/Pages/Interpreter.html", "link": "Devise/Pages/Interpreter/DeviseParser.html", "name": "Devise\\Pages\\Interpreter\\DeviseParser", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DeviseParser", "fromLink": "Devise/Pages/Interpreter/DeviseParser.html", "link": "Devise/Pages/Interpreter/DeviseParser.html#method___construct", "name": "Devise\\Pages\\Interpreter\\DeviseParser::__construct", "doc": "&quot;Create a new Devise Parser&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DeviseParser", "fromLink": "Devise/Pages/Interpreter/DeviseParser.html", "link": "Devise/Pages/Interpreter/DeviseParser.html#method_parse", "name": "Devise\\Pages\\Interpreter\\DeviseParser::parse", "doc": "&quot;Parses the string for us&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DeviseParser", "fromLink": "Devise/Pages/Interpreter/DeviseParser.html", "link": "Devise/Pages/Interpreter/DeviseParser.html#method_getDeviseTags", "name": "Devise\\Pages\\Interpreter\\DeviseParser::getDeviseTags", "doc": "&quot;Get the list of regex&#039;ed devise tags out of the html&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DeviseParser", "fromLink": "Devise/Pages/Interpreter/DeviseParser.html", "link": "Devise/Pages/Interpreter/DeviseParser.html#method_hasDeviseTags", "name": "Devise\\Pages\\Interpreter\\DeviseParser::hasDeviseTags", "doc": "&quot;Check the html to see if it has any devise tags in it&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter", "fromLink": "Devise/Pages/Interpreter.html", "link": "Devise/Pages/Interpreter/DeviseTag.html", "name": "Devise\\Pages\\Interpreter\\DeviseTag", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DeviseTag", "fromLink": "Devise/Pages/Interpreter/DeviseTag.html", "link": "Devise/Pages/Interpreter/DeviseTag.html#method___construct", "name": "Devise\\Pages\\Interpreter\\DeviseTag::__construct", "doc": "&quot;Create a new devise tag&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DeviseTag", "fromLink": "Devise/Pages/Interpreter/DeviseTag.html", "link": "Devise/Pages/Interpreter/DeviseTag.html#method___toString", "name": "Devise\\Pages\\Interpreter\\DeviseTag::__toString", "doc": "&quot;Convert this object to a string&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DeviseTag", "fromLink": "Devise/Pages/Interpreter/DeviseTag.html", "link": "Devise/Pages/Interpreter/DeviseTag.html#method_toArray", "name": "Devise\\Pages\\Interpreter\\DeviseTag::toArray", "doc": "&quot;Converts our devise tag into a giant ass array&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter", "fromLink": "Devise/Pages/Interpreter.html", "link": "Devise/Pages/Interpreter/DvsPageData.html", "name": "Devise\\Pages\\Interpreter\\DvsPageData", "doc": "&quot;A storage container class that stores collections and fields\nfor a given page. These fields and collections are addeded\nto a singleton registered in Devise\\Pages\\PagesServiceProvider.php\ncalled &#039;dvsPageData&#039;. ALl blade views that contain fields and\/or\ncollections will use methods like addCollection and addField respectively\nto add in the data. Eventually all this data is spit out as JSON\nfor the javascript library in devise to take over from there.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DvsPageData", "fromLink": "Devise/Pages/Interpreter/DvsPageData.html", "link": "Devise/Pages/Interpreter/DvsPageData.html#method___construct", "name": "Devise\\Pages\\Interpreter\\DvsPageData::__construct", "doc": "&quot;Create a new page data object&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DvsPageData", "fromLink": "Devise/Pages/Interpreter/DvsPageData.html", "link": "Devise/Pages/Interpreter/DvsPageData.html#method_toJSON", "name": "Devise\\Pages\\Interpreter\\DvsPageData::toJSON", "doc": "&quot;Creates a json object that we use for editing a\ndevise page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DvsPageData", "fromLink": "Devise/Pages/Interpreter/DvsPageData.html", "link": "Devise/Pages/Interpreter/DvsPageData.html#method_initialize", "name": "Devise\\Pages\\Interpreter\\DvsPageData::initialize", "doc": "&quot;The dvs page data cannot create fields and collection objects\nwithout knowing what page we are on. This is injected in on every\nview that uses dvsPageData.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DvsPageData", "fromLink": "Devise/Pages/Interpreter/DvsPageData.html", "link": "Devise/Pages/Interpreter/DvsPageData.html#method_register", "name": "Devise\\Pages\\Interpreter\\DvsPageData::register", "doc": "&quot;Register a binding, collection or model data-devise tag using\nthis method.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DvsPageData", "fromLink": "Devise/Pages/Interpreter/DvsPageData.html", "link": "Devise/Pages/Interpreter/DvsPageData.html#method_setDefaults", "name": "Devise\\Pages\\Interpreter\\DvsPageData::setDefaults", "doc": "&quot;Try to set defaults for an id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DvsPageData", "fromLink": "Devise/Pages/Interpreter/DvsPageData.html", "link": "Devise/Pages/Interpreter/DvsPageData.html#method_cid", "name": "Devise\\Pages\\Interpreter\\DvsPageData::cid", "doc": "&quot;Returns the cid for this $id and also sets default values\nfor this cid. At this point, the $default values should be\nset correctly, if not then we need to just throw the exception\nbecause something is not right. We also allow for variables\nin this place, so we need to update all the values for this\n$id. So if we have a human name with like $someVar in it, then\nthis is the place where we actually update it.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\DvsPageData", "fromLink": "Devise/Pages/Interpreter/DvsPageData.html", "link": "Devise/Pages/Interpreter/DvsPageData.html#method_database", "name": "Devise\\Pages\\Interpreter\\DvsPageData::database", "doc": "&quot;Set the values up in the database&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter\\Exceptions", "fromLink": "Devise/Pages/Interpreter/Exceptions.html", "link": "Devise/Pages/Interpreter/Exceptions/DuplicateDeviseKeyException.html", "name": "Devise\\Pages\\Interpreter\\Exceptions\\DuplicateDeviseKeyException", "doc": "&quot;This exception is thrown anytime there are multiple devise\nfields on a page that share the same key. Keys are unique to\nthe page.&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter\\Exceptions", "fromLink": "Devise/Pages/Interpreter/Exceptions.html", "link": "Devise/Pages/Interpreter/Exceptions/InvalidDeviseKeyException.html", "name": "Devise\\Pages\\Interpreter\\Exceptions\\InvalidDeviseKeyException", "doc": "&quot;This exception is thrown anytime the devise key is\ninvalid. A invalid variable name in php is considered\nan invalid key name. We have to use key name in\nphp to referrence the devise key, i.e. $keyName-&gt;text&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter\\Exceptions", "fromLink": "Devise/Pages/Interpreter/Exceptions.html", "link": "Devise/Pages/Interpreter/Exceptions/InvalidDeviseTagException.html", "name": "Devise\\Pages\\Interpreter\\Exceptions\\InvalidDeviseTagException", "doc": "&quot;Thrown whenever the devise tag is malformed.&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter\\Exceptions", "fromLink": "Devise/Pages/Interpreter/Exceptions.html", "link": "Devise/Pages/Interpreter/Exceptions/InvalidModelMappingException.html", "name": "Devise\\Pages\\Interpreter\\Exceptions\\InvalidModelMappingException", "doc": "&quot;Thrown whenever the model tag has no picks, resulting\nin a zero count mapping inside the TagManager&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter\\Exceptions", "fromLink": "Devise/Pages/Interpreter/Exceptions.html", "link": "Devise/Pages/Interpreter/Exceptions/PageDataNotInitializedException.html", "name": "Devise\\Pages\\Interpreter\\Exceptions\\PageDataNotInitializedException", "doc": "&quot;Thrown whenever the page is not initialized with\ncorrect data. This should never happen unless\nwe have bugs in our code.&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter\\Modifiers", "fromLink": "Devise/Pages/Interpreter/Modifiers.html", "link": "Devise/Pages/Interpreter/Modifiers/AddPlaceHolderTags.html", "name": "Devise\\Pages\\Interpreter\\Modifiers\\AddPlaceHolderTags", "doc": "&quot;This visitor class handles putting&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\Modifiers\\AddPlaceHolderTags", "fromLink": "Devise/Pages/Interpreter/Modifiers/AddPlaceHolderTags.html", "link": "Devise/Pages/Interpreter/Modifiers/AddPlaceHolderTags.html#method___construct", "name": "Devise\\Pages\\Interpreter\\Modifiers\\AddPlaceHolderTags::__construct", "doc": "&quot;[__construct description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\Modifiers\\AddPlaceHolderTags", "fromLink": "Devise/Pages/Interpreter/Modifiers/AddPlaceHolderTags.html", "link": "Devise/Pages/Interpreter/Modifiers/AddPlaceHolderTags.html#method_afterTraverse", "name": "Devise\\Pages\\Interpreter\\Modifiers\\AddPlaceHolderTags::afterTraverse", "doc": "&quot;Runs after all the nodes have been examined&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter\\Modifiers", "fromLink": "Devise/Pages/Interpreter/Modifiers.html", "link": "Devise/Pages/Interpreter/Modifiers/CreatePristineSection.html", "name": "Devise\\Pages\\Interpreter\\Modifiers\\CreatePristineSection", "doc": "&quot;this creates two sections, one for devise editors\nand the other a pristine section which removes\nall the data-devise stuff.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\Modifiers\\CreatePristineSection", "fromLink": "Devise/Pages/Interpreter/Modifiers/CreatePristineSection.html", "link": "Devise/Pages/Interpreter/Modifiers/CreatePristineSection.html#method___construct", "name": "Devise\\Pages\\Interpreter\\Modifiers\\CreatePristineSection::__construct", "doc": "&quot;[__construct description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\Modifiers\\CreatePristineSection", "fromLink": "Devise/Pages/Interpreter/Modifiers/CreatePristineSection.html", "link": "Devise/Pages/Interpreter/Modifiers/CreatePristineSection.html#method_enterNode", "name": "Devise\\Pages\\Interpreter\\Modifiers\\CreatePristineSection::enterNode", "doc": "&quot;Removes the devise tag stuff&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\Modifiers\\CreatePristineSection", "fromLink": "Devise/Pages/Interpreter/Modifiers/CreatePristineSection.html", "link": "Devise/Pages/Interpreter/Modifiers/CreatePristineSection.html#method_beforeTraverse", "name": "Devise\\Pages\\Interpreter\\Modifiers\\CreatePristineSection::beforeTraverse", "doc": "&quot;Runs after all the nodes have been examined&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\Modifiers\\CreatePristineSection", "fromLink": "Devise/Pages/Interpreter/Modifiers/CreatePristineSection.html", "link": "Devise/Pages/Interpreter/Modifiers/CreatePristineSection.html#method_afterTraverse", "name": "Devise\\Pages\\Interpreter\\Modifiers\\CreatePristineSection::afterTraverse", "doc": "&quot;After we traverse the tree, we are going to\nsplit the view into two parts. The first part\nis for devise editors and the second part\nis for pristine viewers&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter\\Modifiers", "fromLink": "Devise/Pages/Interpreter/Modifiers.html", "link": "Devise/Pages/Interpreter/Modifiers/EchoDeviseMagic.html", "name": "Devise\\Pages\\Interpreter\\Modifiers\\EchoDeviseMagic", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\Modifiers\\EchoDeviseMagic", "fromLink": "Devise/Pages/Interpreter/Modifiers/EchoDeviseMagic.html", "link": "Devise/Pages/Interpreter/Modifiers/EchoDeviseMagic.html#method___construct", "name": "Devise\\Pages\\Interpreter\\Modifiers\\EchoDeviseMagic::__construct", "doc": "&quot;Create a new EchoDeviseMagic visitor&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\Modifiers\\EchoDeviseMagic", "fromLink": "Devise/Pages/Interpreter/Modifiers/EchoDeviseMagic.html", "link": "Devise/Pages/Interpreter/Modifiers/EchoDeviseMagic.html#method_enterNode", "name": "Devise\\Pages\\Interpreter\\Modifiers\\EchoDeviseMagic::enterNode", "doc": "&quot;We need to look for different types of nodes inside\nof echo nodes only&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter\\Modifiers", "fromLink": "Devise/Pages/Interpreter/Modifiers.html", "link": "Devise/Pages/Interpreter/Modifiers/RegisterDeviseTags.html", "name": "Devise\\Pages\\Interpreter\\Modifiers\\RegisterDeviseTags", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\Modifiers\\RegisterDeviseTags", "fromLink": "Devise/Pages/Interpreter/Modifiers/RegisterDeviseTags.html", "link": "Devise/Pages/Interpreter/Modifiers/RegisterDeviseTags.html#method___construct", "name": "Devise\\Pages\\Interpreter\\Modifiers\\RegisterDeviseTags::__construct", "doc": "&quot;Create a new RegisterDeviseTags visitor&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\Modifiers\\RegisterDeviseTags", "fromLink": "Devise/Pages/Interpreter/Modifiers/RegisterDeviseTags.html", "link": "Devise/Pages/Interpreter/Modifiers/RegisterDeviseTags.html#method_enterNode", "name": "Devise\\Pages\\Interpreter\\Modifiers\\RegisterDeviseTags::enterNode", "doc": "&quot;We are examine this node for data-devise tags inside\nof the html. We only need to check out InlineHTML nodes&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\Modifiers\\RegisterDeviseTags", "fromLink": "Devise/Pages/Interpreter/Modifiers/RegisterDeviseTags.html", "link": "Devise/Pages/Interpreter/Modifiers/RegisterDeviseTags.html#method_afterTraverse", "name": "Devise\\Pages\\Interpreter\\Modifiers\\RegisterDeviseTags::afterTraverse", "doc": "&quot;Runs after all the nodes have been examined&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter", "fromLink": "Devise/Pages/Interpreter.html", "link": "Devise/Pages/Interpreter/TagManager.html", "name": "Devise\\Pages\\Interpreter\\TagManager", "doc": "&quot;Create and find tags in the database. A tag could be a model, field,\nattribute, model creator or collection&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\TagManager", "fromLink": "Devise/Pages/Interpreter/TagManager.html", "link": "Devise/Pages/Interpreter/TagManager.html#method___construct", "name": "Devise\\Pages\\Interpreter\\TagManager::__construct", "doc": "&quot;Create a new tag manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\TagManager", "fromLink": "Devise/Pages/Interpreter/TagManager.html", "link": "Devise/Pages/Interpreter/TagManager.html#method_initialize", "name": "Devise\\Pages\\Interpreter\\TagManager::initialize", "doc": "&quot;Initializes values for our tag manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\TagManager", "fromLink": "Devise/Pages/Interpreter/TagManager.html", "link": "Devise/Pages/Interpreter/TagManager.html#method_getInstanceForTag", "name": "Devise\\Pages\\Interpreter\\TagManager::getInstanceForTag", "doc": "&quot;Find this tag in the database&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Interpreter", "fromLink": "Devise/Pages/Interpreter.html", "link": "Devise/Pages/Interpreter/ViewOpener.html", "name": "Devise\\Pages\\Interpreter\\ViewOpener", "doc": "&quot;Class ViewOpener opens a view for an include statement in this format:&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\ViewOpener", "fromLink": "Devise/Pages/Interpreter/ViewOpener.html", "link": "Devise/Pages/Interpreter/ViewOpener.html#method___construct", "name": "Devise\\Pages\\Interpreter\\ViewOpener::__construct", "doc": "&quot;Construct a new view opener&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\ViewOpener", "fromLink": "Devise/Pages/Interpreter/ViewOpener.html", "link": "Devise/Pages/Interpreter/ViewOpener.html#method_open", "name": "Devise\\Pages\\Interpreter\\ViewOpener::open", "doc": "&quot;Attempt to open the view path if something fails then we silently\nfail and return an empty string.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\ViewOpener", "fromLink": "Devise/Pages/Interpreter/ViewOpener.html", "link": "Devise/Pages/Interpreter/ViewOpener.html#method_findAllIncludedViews", "name": "Devise\\Pages\\Interpreter\\ViewOpener::findAllIncludedViews", "doc": "&quot;Recursively finds every view that is included inside this view&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Interpreter\\ViewOpener", "fromLink": "Devise/Pages/Interpreter/ViewOpener.html", "link": "Devise/Pages/Interpreter/ViewOpener.html#method_openViewPath", "name": "Devise\\Pages\\Interpreter\\ViewOpener::openViewPath", "doc": "&quot;Find the real path&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Models", "fromLink": "Devise/Pages/Models.html", "link": "Devise/Pages/Models/ModelFieldValidationFailedException.html", "name": "Devise\\Pages\\Models\\ModelFieldValidationFailedException", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Models\\ModelFieldValidationFailedException", "fromLink": "Devise/Pages/Models/ModelFieldValidationFailedException.html", "link": "Devise/Pages/Models/ModelFieldValidationFailedException.html#method___construct", "name": "Devise\\Pages\\Models\\ModelFieldValidationFailedException::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Models\\ModelFieldValidationFailedException", "fromLink": "Devise/Pages/Models/ModelFieldValidationFailedException.html", "link": "Devise/Pages/Models/ModelFieldValidationFailedException.html#method_getErrors", "name": "Devise\\Pages\\Models\\ModelFieldValidationFailedException::getErrors", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Models", "fromLink": "Devise/Pages/Models.html", "link": "Devise/Pages/Models/ModelManager.html", "name": "Devise\\Pages\\Models\\ModelManager", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Models\\ModelManager", "fromLink": "Devise/Pages/Models/ModelManager.html", "link": "Devise/Pages/Models/ModelManager.html#method___construct", "name": "Devise\\Pages\\Models\\ModelManager::__construct", "doc": "&quot;Create a new model manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Models\\ModelManager", "fromLink": "Devise/Pages/Models/ModelManager.html", "link": "Devise/Pages/Models/ModelManager.html#method_updateField", "name": "Devise\\Pages\\Models\\ModelManager::updateField", "doc": "&quot;Updates a single field&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Models\\ModelManager", "fromLink": "Devise/Pages/Models/ModelManager.html", "link": "Devise/Pages/Models/ModelManager.html#method_createFieldsAndModel", "name": "Devise\\Pages\\Models\\ModelManager::createFieldsAndModel", "doc": "&quot;Creates a new model from the given fields&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Models\\ModelManager", "fromLink": "Devise/Pages/Models/ModelManager.html", "link": "Devise/Pages/Models/ModelManager.html#method_updateFields", "name": "Devise\\Pages\\Models\\ModelManager::updateFields", "doc": "&quot;Update each field in this fields array&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Models", "fromLink": "Devise/Pages/Models.html", "link": "Devise/Pages/Models/ModelsResponseHandler.html", "name": "Devise\\Pages\\Models\\ModelsResponseHandler", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Models\\ModelsResponseHandler", "fromLink": "Devise/Pages/Models/ModelsResponseHandler.html", "link": "Devise/Pages/Models/ModelsResponseHandler.html#method___construct", "name": "Devise\\Pages\\Models\\ModelsResponseHandler::__construct", "doc": "&quot;Create a new model manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Models\\ModelsResponseHandler", "fromLink": "Devise/Pages/Models/ModelsResponseHandler.html", "link": "Devise/Pages/Models/ModelsResponseHandler.html#method_executeModelFieldUpdate", "name": "Devise\\Pages\\Models\\ModelsResponseHandler::executeModelFieldUpdate", "doc": "&quot;Updates a single model field for this model (attribute)&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Models\\ModelsResponseHandler", "fromLink": "Devise/Pages/Models/ModelsResponseHandler.html", "link": "Devise/Pages/Models/ModelsResponseHandler.html#method_executeModelFieldsUpdate", "name": "Devise\\Pages\\Models\\ModelsResponseHandler::executeModelFieldsUpdate", "doc": "&quot;Loops over all fields for this model and updates\nthe model with new values (model)&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Models\\ModelsResponseHandler", "fromLink": "Devise/Pages/Models/ModelsResponseHandler.html", "link": "Devise/Pages/Models/ModelsResponseHandler.html#method_executeModelFieldsCreate", "name": "Devise\\Pages\\Models\\ModelsResponseHandler::executeModelFieldsCreate", "doc": "&quot;Model creators use this to create new model fields\nfor a model (model creator)&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/PageController.html", "name": "Devise\\Pages\\PageController", "doc": "&quot;All pages registered in dvs_pages database table\ncome through this controller show method. The reason\nfor this is so that the database can be in charge of\nthe routes and a non developer can construct new\npages with predefined templates in a dropdown selectbox.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\PageController", "fromLink": "Devise/Pages/PageController.html", "link": "Devise/Pages/PageController.html#method___construct", "name": "Devise\\Pages\\PageController::__construct", "doc": "&quot;Creates a new DvsPagesController instance.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageController", "fromLink": "Devise/Pages/PageController.html", "link": "Devise/Pages/PageController.html#method_show", "name": "Devise\\Pages\\PageController::show", "doc": "&quot;Displays details of a page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageController", "fromLink": "Devise/Pages/PageController.html", "link": "Devise/Pages/PageController.html#method_retrieveResponse", "name": "Devise\\Pages\\PageController::retrieveResponse", "doc": "&quot;This retrieves a page with all the\nview&#039;s vars set on the response&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/PageManager.html", "name": "Devise\\Pages\\PageManager", "doc": "&quot;Class PageManager manages the creating of new pages,\nupdating pages and removing and copying pages.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\PageManager", "fromLink": "Devise/Pages/PageManager.html", "link": "Devise/Pages/PageManager.html#method___construct", "name": "Devise\\Pages\\PageManager::__construct", "doc": "&quot;Construct a new page manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageManager", "fromLink": "Devise/Pages/PageManager.html", "link": "Devise/Pages/PageManager.html#method_createNewPage", "name": "Devise\\Pages\\PageManager::createNewPage", "doc": "&quot;Validates and creates a page with the given input&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageManager", "fromLink": "Devise/Pages/PageManager.html", "link": "Devise/Pages/PageManager.html#method_updatePage", "name": "Devise\\Pages\\PageManager::updatePage", "doc": "&quot;Validates and updates a page with the given input&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageManager", "fromLink": "Devise/Pages/PageManager.html", "link": "Devise/Pages/PageManager.html#method_destroyPage", "name": "Devise\\Pages\\PageManager::destroyPage", "doc": "&quot;Destroys a page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageManager", "fromLink": "Devise/Pages/PageManager.html", "link": "Devise/Pages/PageManager.html#method_copyPage", "name": "Devise\\Pages\\PageManager::copyPage", "doc": "&quot;Takes the input provided and runs the create method after stripping necessary fields.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageManager", "fromLink": "Devise/Pages/PageManager.html", "link": "Devise/Pages/PageManager.html#method_updatePageVersionDates", "name": "Devise\\Pages\\PageManager::updatePageVersionDates", "doc": "&quot;Updates the page version dates&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageManager", "fromLink": "Devise/Pages/PageManager.html", "link": "Devise/Pages/PageManager.html#method_markContentRequestedFieldsComplete", "name": "Devise\\Pages\\PageManager::markContentRequestedFieldsComplete", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/PageNotFoundException.html", "name": "Devise\\Pages\\PageNotFoundException", "doc": "&quot;This exception is thrown whenever the page is not found\nin the database (likely because the page is not published)&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/PageResponseHandler.html", "name": "Devise\\Pages\\PageResponseHandler", "doc": "&quot;Response handler takes care of creating,updating, destroying\nand copying pages within the \/admin\/pages routes&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\PageResponseHandler", "fromLink": "Devise/Pages/PageResponseHandler.html", "link": "Devise/Pages/PageResponseHandler.html#method___construct", "name": "Devise\\Pages\\PageResponseHandler::__construct", "doc": "&quot;Construct a new PageResponseHandler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageResponseHandler", "fromLink": "Devise/Pages/PageResponseHandler.html", "link": "Devise/Pages/PageResponseHandler.html#method_requestCreateNewPage", "name": "Devise\\Pages\\PageResponseHandler::requestCreateNewPage", "doc": "&quot;Request a new page be created&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageResponseHandler", "fromLink": "Devise/Pages/PageResponseHandler.html", "link": "Devise/Pages/PageResponseHandler.html#method_requestUpdatePage", "name": "Devise\\Pages\\PageResponseHandler::requestUpdatePage", "doc": "&quot;Request page be updated with given input&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageResponseHandler", "fromLink": "Devise/Pages/PageResponseHandler.html", "link": "Devise/Pages/PageResponseHandler.html#method_requestDestroyPage", "name": "Devise\\Pages\\PageResponseHandler::requestDestroyPage", "doc": "&quot;Request the page be deleted from database&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageResponseHandler", "fromLink": "Devise/Pages/PageResponseHandler.html", "link": "Devise/Pages/PageResponseHandler.html#method_requestCopyPage", "name": "Devise\\Pages\\PageResponseHandler::requestCopyPage", "doc": "&quot;Request the page be copied to another page (duplicated)&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageResponseHandler", "fromLink": "Devise/Pages/PageResponseHandler.html", "link": "Devise/Pages/PageResponseHandler.html#method_requestStorePageVersion", "name": "Devise\\Pages\\PageResponseHandler::requestStorePageVersion", "doc": "&quot;Request page version be stored&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageResponseHandler", "fromLink": "Devise/Pages/PageResponseHandler.html", "link": "Devise/Pages/PageResponseHandler.html#method_requestDestroyPageVersion", "name": "Devise\\Pages\\PageResponseHandler::requestDestroyPageVersion", "doc": "&quot;Request page version be destroyed&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageResponseHandler", "fromLink": "Devise/Pages/PageResponseHandler.html", "link": "Devise/Pages/PageResponseHandler.html#method_requestPageList", "name": "Devise\\Pages\\PageResponseHandler::requestPageList", "doc": "&quot;Request the page listing&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageResponseHandler", "fromLink": "Devise/Pages/PageResponseHandler.html", "link": "Devise/Pages/PageResponseHandler.html#method_requestUpdatePageVersionDates", "name": "Devise\\Pages\\PageResponseHandler::requestUpdatePageVersionDates", "doc": "&quot;Request a page version be updated&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageResponseHandler", "fromLink": "Devise/Pages/PageResponseHandler.html", "link": "Devise/Pages/PageResponseHandler.html#method_requestTogglePageVersionShare", "name": "Devise\\Pages\\PageResponseHandler::requestTogglePageVersionShare", "doc": "&quot;Request that the page version sharing be toggled&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/PageVersionManager.html", "name": "Devise\\Pages\\PageVersionManager", "doc": "&quot;Class PageVersionManager manages all things page versions related.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\PageVersionManager", "fromLink": "Devise/Pages/PageVersionManager.html", "link": "Devise/Pages/PageVersionManager.html#method___construct", "name": "Devise\\Pages\\PageVersionManager::__construct", "doc": "&quot;Construction\ndepends on PageVersin model and UserHelper to get current user id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageVersionManager", "fromLink": "Devise/Pages/PageVersionManager.html", "link": "Devise/Pages/PageVersionManager.html#method_createNewPageVersion", "name": "Devise\\Pages\\PageVersionManager::createNewPageVersion", "doc": "&quot;Create a new page version with given parameters&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageVersionManager", "fromLink": "Devise/Pages/PageVersionManager.html", "link": "Devise/Pages/PageVersionManager.html#method_createDefaultPageVersion", "name": "Devise\\Pages\\PageVersionManager::createDefaultPageVersion", "doc": "&quot;Create a new default page version for given page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageVersionManager", "fromLink": "Devise/Pages/PageVersionManager.html", "link": "Devise/Pages/PageVersionManager.html#method_copyPageVersionToAnotherPage", "name": "Devise\\Pages\\PageVersionManager::copyPageVersionToAnotherPage", "doc": "&quot;Copies a page version to another page this is useful\nwhen creating different languages of the same page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageVersionManager", "fromLink": "Devise/Pages/PageVersionManager.html", "link": "Devise/Pages/PageVersionManager.html#method_copyPageVersion", "name": "Devise\\Pages\\PageVersionManager::copyPageVersion", "doc": "&quot;Copy page version for given page version id and name&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageVersionManager", "fromLink": "Devise/Pages/PageVersionManager.html", "link": "Devise/Pages/PageVersionManager.html#method_updatePageVersionDates", "name": "Devise\\Pages\\PageVersionManager::updatePageVersionDates", "doc": "&quot;Update the page version dates&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageVersionManager", "fromLink": "Devise/Pages/PageVersionManager.html", "link": "Devise/Pages/PageVersionManager.html#method_destroyPageVersion", "name": "Devise\\Pages\\PageVersionManager::destroyPageVersion", "doc": "&quot;Destroys a page version record&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageVersionManager", "fromLink": "Devise/Pages/PageVersionManager.html", "link": "Devise/Pages/PageVersionManager.html#method_togglePageVersionPreviewShare", "name": "Devise\\Pages\\PageVersionManager::togglePageVersionPreviewShare", "doc": "&quot;Toggle \&quot;preview_hash\&quot; value between hashed string and null.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/PageVersionsRepository.html", "name": "Devise\\Pages\\PageVersionsRepository", "doc": "&quot;Class PageVersionsRepository is used to search and retrieve\nDvsPageVersion models and things in context of a Devise Page Versions.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\PageVersionsRepository", "fromLink": "Devise/Pages/PageVersionsRepository.html", "link": "Devise/Pages/PageVersionsRepository.html#method___construct", "name": "Devise\\Pages\\PageVersionsRepository::__construct", "doc": "&quot;Create a new PageRepostiry instance.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageVersionsRepository", "fromLink": "Devise/Pages/PageVersionsRepository.html", "link": "Devise/Pages/PageVersionsRepository.html#method_getUnscheduledPageVersions", "name": "Devise\\Pages\\PageVersionsRepository::getUnscheduledPageVersions", "doc": "&quot;Returns a list of all the unscheduled page versions\nin this system&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PageVersionsRepository", "fromLink": "Devise/Pages/PageVersionsRepository.html", "link": "Devise/Pages/PageVersionsRepository.html#method_getVersionsListForPage", "name": "Devise\\Pages\\PageVersionsRepository::getVersionsListForPage", "doc": "&quot;Returns a list of all the versions for a particular page&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/PagesException.html", "name": "Devise\\Pages\\PagesException", "doc": "&quot;This exception is thrown whenever there are problems with pages\ninside of PagesControllerResponse&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/PagesRepository.html", "name": "Devise\\Pages\\PagesRepository", "doc": "&quot;Class PagesRepository is used to search and retrieve DvsPage models\nand things in context of a Devise Page.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method___construct", "name": "Devise\\Pages\\PagesRepository::__construct", "doc": "&quot;Create a new PageRepostiry instance.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_find", "name": "Devise\\Pages\\PagesRepository::find", "doc": "&quot;finds a record by it&#039;s id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_findWithVersion", "name": "Devise\\Pages\\PagesRepository::findWithVersion", "doc": "&quot;finds a record by it&#039;s id and provide version and field data&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_findByRouteName", "name": "Devise\\Pages\\PagesRepository::findByRouteName", "doc": "&quot;finds a record by it&#039;s slug&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_findByRouteNameAndPreviewHash", "name": "Devise\\Pages\\PagesRepository::findByRouteNameAndPreviewHash", "doc": "&quot;Finds the DvsPage by a route name and preview hash&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_findLocalizedPage", "name": "Devise\\Pages\\PagesRepository::findLocalizedPage", "doc": "&quot;See if a localized version of this page exists\nif there is no difference we return null&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_findTemplateVariables", "name": "Devise\\Pages\\PagesRepository::findTemplateVariables", "doc": "&quot;Find the page variables for this given page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_findPageTemplates", "name": "Devise\\Pages\\PagesRepository::findPageTemplates", "doc": "&quot;Find the page templates for this given page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_pages", "name": "Devise\\Pages\\PagesRepository::pages", "doc": "&quot;Finds lots of pages in the system that\nare not admin pages and belong to the current language&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_availableLanguagesForPage", "name": "Devise\\Pages\\PagesRepository::availableLanguagesForPage", "doc": "&quot;List of all the languages available for a page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_getPageVersions", "name": "Devise\\Pages\\PagesRepository::getPageVersions", "doc": "&quot;Get the versions of a page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_getRouteList", "name": "Devise\\Pages\\PagesRepository::getRouteList", "doc": "&quot;Get the route list for all the non admin pages&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_getLivePageVersion", "name": "Devise\\Pages\\PagesRepository::getLivePageVersion", "doc": "&quot;Gets the live version of this page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_getPageVersionByName", "name": "Devise\\Pages\\PagesRepository::getPageVersionByName", "doc": "&quot;Gets the page version by name&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_getPagesList", "name": "Devise\\Pages\\PagesRepository::getPagesList", "doc": "&quot;Gets a list of pages in array format probably used for\ndrop down boxes.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_getUnUsedLanguageList", "name": "Devise\\Pages\\PagesRepository::getUnUsedLanguageList", "doc": "&quot;Gets a list of languages that the page has not been translated to or originates from&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesRepository", "fromLink": "Devise/Pages/PagesRepository.html", "link": "Devise/Pages/PagesRepository.html#method_availableViewsList", "name": "Devise\\Pages\\PagesRepository::availableViewsList", "doc": "&quot;Get the list of available views&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages", "fromLink": "Devise/Pages.html", "link": "Devise/Pages/PagesServiceProvider.html", "name": "Devise\\Pages\\PagesServiceProvider", "doc": "&quot;Registers the Pages service provider. This allows us to manage our pages\nwithin the Devise cms. It also provides the ability to scan blade views\nand extract out fields and collections which can be loaded in the Devise\nSidebar and maintained by the admin.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\PagesServiceProvider", "fromLink": "Devise/Pages/PagesServiceProvider.html", "link": "Devise/Pages/PagesServiceProvider.html#method_boot", "name": "Devise\\Pages\\PagesServiceProvider::boot", "doc": "&quot;Loads the route file which allows us to\nhave slugs in the url (set via the dvs_pages database\ntable)&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesServiceProvider", "fromLink": "Devise/Pages/PagesServiceProvider.html", "link": "Devise/Pages/PagesServiceProvider.html#method_register", "name": "Devise\\Pages\\PagesServiceProvider::register", "doc": "&quot;Register the service provider.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\PagesServiceProvider", "fromLink": "Devise/Pages/PagesServiceProvider.html", "link": "Devise/Pages/PagesServiceProvider.html#method_provides", "name": "Devise\\Pages\\PagesServiceProvider::provides", "doc": "&quot;Get the services provided by the provider.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Viewvars", "fromLink": "Devise/Pages/Viewvars.html", "link": "Devise/Pages/Viewvars/DataBuilder.html", "name": "Devise\\Pages\\Viewvars\\DataBuilder", "doc": "&quot;This builds the variables that are found in views.php config\n for a devise page. It uses a ViewComposer (found in this directory)\n to inject in the data that is built using this class.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Viewvars\\DataBuilder", "fromLink": "Devise/Pages/Viewvars/DataBuilder.html", "link": "Devise/Pages/Viewvars/DataBuilder.html#method___construct", "name": "Devise\\Pages\\Viewvars\\DataBuilder::__construct", "doc": "&quot;Construct a new data builder&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Viewvars\\DataBuilder", "fromLink": "Devise/Pages/Viewvars/DataBuilder.html", "link": "Devise/Pages/Viewvars/DataBuilder.html#method_compile", "name": "Devise\\Pages\\Viewvars\\DataBuilder::compile", "doc": "&quot;Injects data from config into the current view&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Viewvars\\DataBuilder", "fromLink": "Devise/Pages/Viewvars/DataBuilder.html", "link": "Devise/Pages/Viewvars/DataBuilder.html#method_setData", "name": "Devise\\Pages\\Viewvars\\DataBuilder::setData", "doc": "&quot;Set the data that will be used by a view composer&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Viewvars\\DataBuilder", "fromLink": "Devise/Pages/Viewvars/DataBuilder.html", "link": "Devise/Pages/Viewvars/DataBuilder.html#method_getData", "name": "Devise\\Pages\\Viewvars\\DataBuilder::getData", "doc": "&quot;Get the data for the view composer&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Viewvars\\DataBuilder", "fromLink": "Devise/Pages/Viewvars/DataBuilder.html", "link": "Devise/Pages/Viewvars/DataBuilder.html#method_getValue", "name": "Devise\\Pages\\Viewvars\\DataBuilder::getValue", "doc": "&quot;Gets the value of the view variable from options\nby parsing the options string and also any parameters\nfor this specific variable.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Viewvars", "fromLink": "Devise/Pages/Viewvars.html", "link": "Devise/Pages/Viewvars/DataCrawler.html", "name": "Devise\\Pages\\Viewvars\\DataCrawler", "doc": "&quot;Purpose of this class is to turn something like this\nin the view vars into a parameter value we can use.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Viewvars\\DataCrawler", "fromLink": "Devise/Pages/Viewvars/DataCrawler.html", "link": "Devise/Pages/Viewvars/DataCrawler.html#method_extract", "name": "Devise\\Pages\\Viewvars\\DataCrawler::extract", "doc": "&quot;Gets the value of a param by it&#039;s name&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Pages\\Viewvars", "fromLink": "Devise/Pages/Viewvars.html", "link": "Devise/Pages/Viewvars/DeviseRouteConfigurationException.html", "name": "Devise\\Pages\\Viewvars\\DeviseRouteConfigurationException", "doc": "&quot;Class DeviseRouteConfigurationException is thrown in the case where\ndevise views.php config has been improperly configured.&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Pages\\Viewvars", "fromLink": "Devise/Pages/Viewvars.html", "link": "Devise/Pages/Viewvars/ViewvarComposer.html", "name": "Devise\\Pages\\Viewvars\\ViewvarComposer", "doc": "&quot;View composer here is registered in the\nDevise\\Pages\\PagesServiceProvider.php for all\nviews that are contained within the views config\nfile. That is how those views have their data injected\ninto them properly - by running through this view composer.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Pages\\Viewvars\\ViewvarComposer", "fromLink": "Devise/Pages/Viewvars/ViewvarComposer.html", "link": "Devise/Pages/Viewvars/ViewvarComposer.html#method___construct", "name": "Devise\\Pages\\Viewvars\\ViewvarComposer::__construct", "doc": "&quot;Create new instance of ViewvarComposer&quot;"},
                    {"type": "Method", "fromName": "Devise\\Pages\\Viewvars\\ViewvarComposer", "fromLink": "Devise/Pages/Viewvars/ViewvarComposer.html", "link": "Devise/Pages/Viewvars/ViewvarComposer.html#method_compose", "name": "Devise\\Pages\\Viewvars\\ViewvarComposer::compose", "doc": "&quot;Injects data from config into the current view&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Search", "fromLink": "Devise/Search.html", "link": "Devise/Search/PageSearch.html", "name": "Devise\\Search\\PageSearch", "doc": "&quot;Class PageSearch is an example of how you could search\nfor pages using the SearchableModelTrait&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Search\\PageSearch", "fromLink": "Devise/Search/PageSearch.html", "link": "Devise/Search/PageSearch.html#method_scopeSearch", "name": "Devise\\Search\\PageSearch::scopeSearch", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Search", "fromLink": "Devise/Search.html", "link": "Devise/Search/Pagination.html", "name": "Devise\\Search\\Pagination", "doc": "&quot;Class Pagination is used so we can paginate search results\nfrom many different searched models&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Search\\Pagination", "fromLink": "Devise/Search/Pagination.html", "link": "Devise/Search/Pagination.html#method_make", "name": "Devise\\Search\\Pagination::make", "doc": "&quot;Makes a new paginated result from a collection&quot;"},
                    {"type": "Method", "fromName": "Devise\\Search\\Pagination", "fromLink": "Devise/Search/Pagination.html", "link": "Devise/Search/Pagination.html#method_links", "name": "Devise\\Search\\Pagination::links", "doc": "&quot;Lets us do links on this paginated object&quot;"},
                    {"type": "Method", "fromName": "Devise\\Search\\Pagination", "fromLink": "Devise/Search/Pagination.html", "link": "Devise/Search/Pagination.html#method_toArray", "name": "Devise\\Search\\Pagination::toArray", "doc": "&quot;Turns this paginated object into an array&quot;"},
                    {"type": "Method", "fromName": "Devise\\Search\\Pagination", "fromLink": "Devise/Search/Pagination.html", "link": "Devise/Search/Pagination.html#method_appends", "name": "Devise\\Search\\Pagination::appends", "doc": "&quot;Append input queries&quot;"},
                    {"type": "Method", "fromName": "Devise\\Search\\Pagination", "fromLink": "Devise/Search/Pagination.html", "link": "Devise/Search/Pagination.html#method_getIterator", "name": "Devise\\Search\\Pagination::getIterator", "doc": "&quot;Iterator lets us traverse this paginated object&quot;"},
                    {"type": "Method", "fromName": "Devise\\Search\\Pagination", "fromLink": "Devise/Search/Pagination.html", "link": "Devise/Search/Pagination.html#method_toJson", "name": "Devise\\Search\\Pagination::toJson", "doc": "&quot;Turns this object into a json serialized object&quot;"},
            
            {"type": "Trait", "fromName": "Devise\\Search", "fromLink": "Devise/Search.html", "link": "Devise/Search/SearchableModelTrait.html", "name": "Devise\\Search\\SearchableModelTrait", "doc": "&quot;Class SearchableModelTrait can be applied to an eloquent model\nto give it \&quot;searchablity\&quot;. You have to override the getColumns method\nand\/or make a\n protected $searchable = array(&#039;column1&#039; =&gt; 1, &#039;column2&#039; =&gt; 2);&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Search\\SearchableModelTrait", "fromLink": "Devise/Search/SearchableModelTrait.html", "link": "Devise/Search/SearchableModelTrait.html#method_scopeSearch", "name": "Devise\\Search\\SearchableModelTrait::scopeSearch", "doc": "&quot;Makes the search process work for a model&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Search", "fromLink": "Devise/Search.html", "link": "Devise/Search/UniversalSearch.html", "name": "Devise\\Search\\UniversalSearch", "doc": "&quot;Class UniversalSearch lets us register new searchable models\nand then search through all of them&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Search\\UniversalSearch", "fromLink": "Devise/Search/UniversalSearch.html", "link": "Devise/Search/UniversalSearch.html#method___construct", "name": "Devise\\Search\\UniversalSearch::__construct", "doc": "&quot;Create a new universal search&quot;"},
                    {"type": "Method", "fromName": "Devise\\Search\\UniversalSearch", "fromLink": "Devise/Search/UniversalSearch.html", "link": "Devise/Search/UniversalSearch.html#method_register", "name": "Devise\\Search\\UniversalSearch::register", "doc": "&quot;Provides a way to register new searchable items\nin our collection of Searchable items&quot;"},
                    {"type": "Method", "fromName": "Devise\\Search\\UniversalSearch", "fromLink": "Devise/Search/UniversalSearch.html", "link": "Devise/Search/UniversalSearch.html#method_search", "name": "Devise\\Search\\UniversalSearch::search", "doc": "&quot;Search through all registered searchers\nand put them together in results&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Search", "fromLink": "Devise/Search.html", "link": "Devise/Search/UniversalSearchProvider.html", "name": "Devise\\Search\\UniversalSearchProvider", "doc": "&quot;Class DeviseUniversalSearchProvider registers the universal\nsearching mechanism for Devise&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Search\\UniversalSearchProvider", "fromLink": "Devise/Search/UniversalSearchProvider.html", "link": "Devise/Search/UniversalSearchProvider.html#method_boot", "name": "Devise\\Search\\UniversalSearchProvider::boot", "doc": "&quot;Bootstrap the application events.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Search\\UniversalSearchProvider", "fromLink": "Devise/Search/UniversalSearchProvider.html", "link": "Devise/Search/UniversalSearchProvider.html#method_register", "name": "Devise\\Search\\UniversalSearchProvider::register", "doc": "&quot;Register the service provider.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Search\\UniversalSearchProvider", "fromLink": "Devise/Search/UniversalSearchProvider.html", "link": "Devise/Search/UniversalSearchProvider.html#method_provides", "name": "Devise\\Search\\UniversalSearchProvider::provides", "doc": "&quot;Get the services provided by the provider.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Config", "fromLink": "Devise/Support/Config.html", "link": "Devise/Support/Config/EnvironmentFileManager.html", "name": "Devise\\Support\\Config\\EnvironmentFileManager", "doc": "&quot;SettingsManager is used to update the config overrides file\nwhich allows an admin to override any config variable in devise&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Config\\EnvironmentFileManager", "fromLink": "Devise/Support/Config/EnvironmentFileManager.html", "link": "Devise/Support/Config/EnvironmentFileManager.html#method___construct", "name": "Devise\\Support\\Config\\EnvironmentFileManager::__construct", "doc": "&quot;Create a new settings manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Config\\EnvironmentFileManager", "fromLink": "Devise/Support/Config/EnvironmentFileManager.html", "link": "Devise/Support/Config/EnvironmentFileManager.html#method_save", "name": "Devise\\Support\\Config\\EnvironmentFileManager::save", "doc": "&quot;This will save the settings to the env file&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Config\\EnvironmentFileManager", "fromLink": "Devise/Support/Config/EnvironmentFileManager.html", "link": "Devise/Support/Config/EnvironmentFileManager.html#method_merge", "name": "Devise\\Support\\Config\\EnvironmentFileManager::merge", "doc": "&quot;Merge in environment settings&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Config\\EnvironmentFileManager", "fromLink": "Devise/Support/Config/EnvironmentFileManager.html", "link": "Devise/Support/Config/EnvironmentFileManager.html#method_createIfNotExists", "name": "Devise\\Support\\Config\\EnvironmentFileManager::createIfNotExists", "doc": "&quot;Checks for existence of .env file, if not\nit creates a new one.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Config\\EnvironmentFileManager", "fromLink": "Devise/Support/Config/EnvironmentFileManager.html", "link": "Devise/Support/Config/EnvironmentFileManager.html#method_get", "name": "Devise\\Support\\Config\\EnvironmentFileManager::get", "doc": "&quot;Extract the settings from the env file\nit should be in format DB_HOST=something\nand take up no more than one line&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Config", "fromLink": "Devise/Support/Config.html", "link": "Devise/Support/Config/FileManager.html", "name": "Devise\\Support\\Config\\FileManager", "doc": "&quot;Class FileManager is used to manage retrieving and modifying\nDevise config(s) files along with any other management functions&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Config\\FileManager", "fromLink": "Devise/Support/Config/FileManager.html", "link": "Devise/Support/Config/FileManager.html#method___construct", "name": "Devise\\Support\\Config\\FileManager::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Config\\FileManager", "fromLink": "Devise/Support/Config/FileManager.html", "link": "Devise/Support/Config/FileManager.html#method_getAppOnly", "name": "Devise\\Support\\Config\\FileManager::getAppOnly", "doc": "&quot;Retrives only the config array from the app&#039;s file. exclude&#039;s the package&#039;s config&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Config\\FileManager", "fromLink": "Devise/Support/Config/FileManager.html", "link": "Devise/Support/Config/FileManager.html#method_saveToFile", "name": "Devise\\Support\\Config\\FileManager::saveToFile", "doc": "&quot;Retrives and writes\/saves supplied content to specified config file&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Config", "fromLink": "Devise/Support/Config.html", "link": "Devise/Support/Config/Overrides.html", "name": "Devise\\Support\\Config\\Overrides", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Config\\Overrides", "fromLink": "Devise/Support/Config/Overrides.html", "link": "Devise/Support/Config/Overrides.html#method___construct", "name": "Devise\\Support\\Config\\Overrides::__construct", "doc": "&quot;create a new config overrides&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Config", "fromLink": "Devise/Support/Config.html", "link": "Devise/Support/Config/SettingsManager.html", "name": "Devise\\Support\\Config\\SettingsManager", "doc": "&quot;SettingsManager is used to update the config overrides file\nwhich allows an admin to override any config variable in devise&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Config\\SettingsManager", "fromLink": "Devise/Support/Config/SettingsManager.html", "link": "Devise/Support/Config/SettingsManager.html#method___construct", "name": "Devise\\Support\\Config\\SettingsManager::__construct", "doc": "&quot;Create a new settings manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Config\\SettingsManager", "fromLink": "Devise/Support/Config/SettingsManager.html", "link": "Devise/Support/Config/SettingsManager.html#method_update", "name": "Devise\\Support\\Config\\SettingsManager::update", "doc": "&quot;Overrides the settings inside of the overrides file\nthis does not merge.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Config\\SettingsManager", "fromLink": "Devise/Support/Config/SettingsManager.html", "link": "Devise/Support/Config/SettingsManager.html#method_merge", "name": "Devise\\Support\\Config\\SettingsManager::merge", "doc": "&quot;Merges these settings in with the other settings from\nthe overrides config file&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Config\\SettingsManager", "fromLink": "Devise/Support/Config/SettingsManager.html", "link": "Devise/Support/Config/SettingsManager.html#method_remove", "name": "Devise\\Support\\Config\\SettingsManager::remove", "doc": "&quot;Removes these overrides from the overrides config\nso we can go back to whatever defaults we need. Not\nbeing used as far as I know yet, but it could come\nin handy soon.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Config", "fromLink": "Devise/Support/Config.html", "link": "Devise/Support/Config/SettingsRepository.html", "name": "Devise\\Support\\Config\\SettingsRepository", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Config\\SettingsRepository", "fromLink": "Devise/Support/Config/SettingsRepository.html", "link": "Devise/Support/Config/SettingsRepository.html#method___construct", "name": "Devise\\Support\\Config\\SettingsRepository::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Config\\SettingsRepository", "fromLink": "Devise/Support/Config/SettingsRepository.html", "link": "Devise/Support/Config/SettingsRepository.html#method_fetchAllOverrides", "name": "Devise\\Support\\Config\\SettingsRepository::fetchAllOverrides", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Config", "fromLink": "Devise/Support/Config.html", "link": "Devise/Support/Config/SettingsResponseHandler.html", "name": "Devise\\Support\\Config\\SettingsResponseHandler", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Config\\SettingsResponseHandler", "fromLink": "Devise/Support/Config/SettingsResponseHandler.html", "link": "Devise/Support/Config/SettingsResponseHandler.html#method___construct", "name": "Devise\\Support\\Config\\SettingsResponseHandler::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Config\\SettingsResponseHandler", "fromLink": "Devise/Support/Config/SettingsResponseHandler.html", "link": "Devise/Support/Config/SettingsResponseHandler.html#method_executeUpdate", "name": "Devise\\Support\\Config\\SettingsResponseHandler::executeUpdate", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Console", "fromLink": "Devise/Support/Console.html", "link": "Devise/Support/Console/DeviseInstallCommand.html", "name": "Devise\\Support\\Console\\DeviseInstallCommand", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Console\\DeviseInstallCommand", "fromLink": "Devise/Support/Console/DeviseInstallCommand.html", "link": "Devise/Support/Console/DeviseInstallCommand.html#method___construct", "name": "Devise\\Support\\Console\\DeviseInstallCommand::__construct", "doc": "&quot;Setup the application container as we&#039;ll need this for running migrations.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Console\\DeviseInstallCommand", "fromLink": "Devise/Support/Console/DeviseInstallCommand.html", "link": "Devise/Support/Console/DeviseInstallCommand.html#method_handle", "name": "Devise\\Support\\Console\\DeviseInstallCommand::handle", "doc": "&quot;Run the package migrations.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Console\\DeviseInstallCommand", "fromLink": "Devise/Support/Console/DeviseInstallCommand.html", "link": "Devise/Support/Console/DeviseInstallCommand.html#method_runInstallCommands", "name": "Devise\\Support\\Console\\DeviseInstallCommand::runInstallCommands", "doc": "&quot;Runs the install commands for migrations, seeds,\npublishing assets and configs&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Console\\DeviseInstallCommand", "fromLink": "Devise/Support/Console/DeviseInstallCommand.html", "link": "Devise/Support/Console/DeviseInstallCommand.html#method_changeDatabaseConfigFile", "name": "Devise\\Support\\Console\\DeviseInstallCommand::changeDatabaseConfigFile", "doc": "&quot;Changes the default out of the box Laravel database\nconfig to include other env() settings that we will\nuse in Devise such as &#039;default&#039; and we also update\nthe sqlite driver stuff&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Console\\DeviseInstallCommand", "fromLink": "Devise/Support/Console/DeviseInstallCommand.html", "link": "Devise/Support/Console/DeviseInstallCommand.html#method_changeEmailConfigFile", "name": "Devise\\Support\\Console\\DeviseInstallCommand::changeEmailConfigFile", "doc": "&quot;Changes the email config file out of the box to include\ndevise as the password reminder view instead of the other\nview&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Console", "fromLink": "Devise/Support/Console.html", "link": "Devise/Support/Console/DeviseMigrateCommand.html", "name": "Devise\\Support\\Console\\DeviseMigrateCommand", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Console\\DeviseMigrateCommand", "fromLink": "Devise/Support/Console/DeviseMigrateCommand.html", "link": "Devise/Support/Console/DeviseMigrateCommand.html#method___construct", "name": "Devise\\Support\\Console\\DeviseMigrateCommand::__construct", "doc": "&quot;Setup the application container as we&#039;ll need this for running migrations.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Console\\DeviseMigrateCommand", "fromLink": "Devise/Support/Console/DeviseMigrateCommand.html", "link": "Devise/Support/Console/DeviseMigrateCommand.html#method_handle", "name": "Devise\\Support\\Console\\DeviseMigrateCommand::handle", "doc": "&quot;Run the package migrations.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Console", "fromLink": "Devise/Support/Console.html", "link": "Devise/Support/Console/DevisePublishAssetsCommand.html", "name": "Devise\\Support\\Console\\DevisePublishAssetsCommand", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Console\\DevisePublishAssetsCommand", "fromLink": "Devise/Support/Console/DevisePublishAssetsCommand.html", "link": "Devise/Support/Console/DevisePublishAssetsCommand.html#method_handle", "name": "Devise\\Support\\Console\\DevisePublishAssetsCommand::handle", "doc": "&quot;Run the package migrations.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Console", "fromLink": "Devise/Support/Console.html", "link": "Devise/Support/Console/DevisePublishConfigsCommand.html", "name": "Devise\\Support\\Console\\DevisePublishConfigsCommand", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Console\\DevisePublishConfigsCommand", "fromLink": "Devise/Support/Console/DevisePublishConfigsCommand.html", "link": "Devise/Support/Console/DevisePublishConfigsCommand.html#method_handle", "name": "Devise\\Support\\Console\\DevisePublishConfigsCommand::handle", "doc": "&quot;Run the package migrations.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Console", "fromLink": "Devise/Support/Console.html", "link": "Devise/Support/Console/DeviseResetCommand.html", "name": "Devise\\Support\\Console\\DeviseResetCommand", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Console\\DeviseResetCommand", "fromLink": "Devise/Support/Console/DeviseResetCommand.html", "link": "Devise/Support/Console/DeviseResetCommand.html#method___construct", "name": "Devise\\Support\\Console\\DeviseResetCommand::__construct", "doc": "&quot;Setup the application container as we&#039;ll need this for running migrations.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Console\\DeviseResetCommand", "fromLink": "Devise/Support/Console/DeviseResetCommand.html", "link": "Devise/Support/Console/DeviseResetCommand.html#method_handle", "name": "Devise\\Support\\Console\\DeviseResetCommand::handle", "doc": "&quot;Run the package migrations.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Console", "fromLink": "Devise/Support/Console.html", "link": "Devise/Support/Console/DeviseSeedCommand.html", "name": "Devise\\Support\\Console\\DeviseSeedCommand", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Console\\DeviseSeedCommand", "fromLink": "Devise/Support/Console/DeviseSeedCommand.html", "link": "Devise/Support/Console/DeviseSeedCommand.html#method___construct", "name": "Devise\\Support\\Console\\DeviseSeedCommand::__construct", "doc": "&quot;Setup the application container as we&#039;ll need this for running migrations.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Console\\DeviseSeedCommand", "fromLink": "Devise/Support/Console/DeviseSeedCommand.html", "link": "Devise/Support/Console/DeviseSeedCommand.html#method_handle", "name": "Devise\\Support\\Console\\DeviseSeedCommand::handle", "doc": "&quot;Run the package migrations.&quot;"},
            
            {"type": "Trait", "fromName": "Devise\\Support", "fromLink": "Devise/Support.html", "link": "Devise/Support/DeviseEloquentAddons.html", "name": "Devise\\Support\\DeviseEloquentAddons", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\DeviseEloquentAddons", "fromLink": "Devise/Support/DeviseEloquentAddons.html", "link": "Devise/Support/DeviseEloquentAddons.html#method_newInstanceWithOldInput", "name": "Devise\\Support\\DeviseEloquentAddons::newInstanceWithOldInput", "doc": "&quot;Lets us get a new instance populated with old input\nif there is any input&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support", "fromLink": "Devise/Support.html", "link": "Devise/Support/DeviseException.html", "name": "Devise\\Support\\DeviseException", "doc": "&quot;Class DeviseException should be the base class exception\nfor any exception thrown inside of Devise. This way we can\ncatch those specifically if we want and know that they are\ndifferent from just regular exceptions.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\DeviseException", "fromLink": "Devise/Support/DeviseException.html", "link": "Devise/Support/DeviseException.html#method_getFacadeRoot", "name": "Devise\\Support\\DeviseException::getFacadeRoot", "doc": "&quot;Pretends to be a Facade for Exception&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support", "fromLink": "Devise/Support.html", "link": "Devise/Support/DeviseHttpException.html", "name": "Devise\\Support\\DeviseHttpException", "doc": "&quot;Class DeviseHttpException should be the base class exception\nfor any exception thrown inside of Devise. This way we can\ncatch those specifically if we want and know that they are\ndifferent from just regular exceptions.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\DeviseHttpException", "fromLink": "Devise/Support/DeviseHttpException.html", "link": "Devise/Support/DeviseHttpException.html#method_getFacadeRoot", "name": "Devise\\Support\\DeviseHttpException::getFacadeRoot", "doc": "&quot;Pretends to be a Facade for Exception&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support", "fromLink": "Devise/Support.html", "link": "Devise/Support/DevisePaginator.html", "name": "Devise\\Support\\DevisePaginator", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\DevisePaginator", "fromLink": "Devise/Support/DevisePaginator.html", "link": "Devise/Support/DevisePaginator.html#method_make", "name": "Devise\\Support\\DevisePaginator::make", "doc": "&quot;Create paginator&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support", "fromLink": "Devise/Support.html", "link": "Devise/Support/DeviseResponse.html", "name": "Devise\\Support\\DeviseResponse", "doc": "&quot;Class DeviseResponse for some reason Illuminate\\Support\\Facades\\Response\nis not an actual facade but a real class. So we can&#039;t use getFacadeAccessor\non it. Instead we write a proxy class called DeviseResponse which simply\ncalls static methods on Response object.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\DeviseResponse", "fromLink": "Devise/Support/DeviseResponse.html", "link": "Devise/Support/DeviseResponse.html#method_getFacadeRoot", "name": "Devise\\Support\\DeviseResponse::getFacadeRoot", "doc": "&quot;Pretends to be a Facade for Response&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\DeviseResponse", "fromLink": "Devise/Support/DeviseResponse.html", "link": "Devise/Support/DeviseResponse.html#method_macro", "name": "Devise\\Support\\DeviseResponse::macro", "doc": "&quot;Registers a macro&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\DeviseResponse", "fromLink": "Devise/Support/DeviseResponse.html", "link": "Devise/Support/DeviseResponse.html#method_hasMacro", "name": "Devise\\Support\\DeviseResponse::hasMacro", "doc": "&quot;Checks if macro is registered&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\DeviseResponse", "fromLink": "Devise/Support/DeviseResponse.html", "link": "Devise/Support/DeviseResponse.html#method_make", "name": "Devise\\Support\\DeviseResponse::make", "doc": "&quot;Return a new response from the application.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\DeviseResponse", "fromLink": "Devise/Support/DeviseResponse.html", "link": "Devise/Support/DeviseResponse.html#method_view", "name": "Devise\\Support\\DeviseResponse::view", "doc": "&quot;Return a new view response from the application.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\DeviseResponse", "fromLink": "Devise/Support/DeviseResponse.html", "link": "Devise/Support/DeviseResponse.html#method_json", "name": "Devise\\Support\\DeviseResponse::json", "doc": "&quot;Return a new JSON response from the application.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\DeviseResponse", "fromLink": "Devise/Support/DeviseResponse.html", "link": "Devise/Support/DeviseResponse.html#method_jsonp", "name": "Devise\\Support\\DeviseResponse::jsonp", "doc": "&quot;Return a new JSONP response from the application.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\DeviseResponse", "fromLink": "Devise/Support/DeviseResponse.html", "link": "Devise/Support/DeviseResponse.html#method_stream", "name": "Devise\\Support\\DeviseResponse::stream", "doc": "&quot;Return a new streamed response from the application.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\DeviseResponse", "fromLink": "Devise/Support/DeviseResponse.html", "link": "Devise/Support/DeviseResponse.html#method_download", "name": "Devise\\Support\\DeviseResponse::download", "doc": "&quot;Create a new file download response.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support", "fromLink": "Devise/Support.html", "link": "Devise/Support/DeviseSeeder.html", "name": "Devise\\Support\\DeviseSeeder", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\DeviseSeeder", "fromLink": "Devise/Support/DeviseSeeder.html", "link": "Devise/Support/DeviseSeeder.html#method_run", "name": "Devise\\Support\\DeviseSeeder::run", "doc": "&quot;Run the database seeds.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\DeviseSeeder", "fromLink": "Devise/Support/DeviseSeeder.html", "link": "Devise/Support/DeviseSeeder.html#method_findOrCreateRow", "name": "Devise\\Support\\DeviseSeeder::findOrCreateRow", "doc": "&quot;We are creating a new page when it does not exist already.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support", "fromLink": "Devise/Support.html", "link": "Devise/Support/DeviseValidationException.html", "name": "Devise\\Support\\DeviseValidationException", "doc": "&quot;This validation exception is thrown\nwhen ever there are validation errors\nsomewhere. It is used in the Manager class\nto assert fields are valid.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\DeviseValidationException", "fromLink": "Devise/Support/DeviseValidationException.html", "link": "Devise/Support/DeviseValidationException.html#method___construct", "name": "Devise\\Support\\DeviseValidationException::__construct", "doc": "&quot;Construct a new Validation exception&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\DeviseValidationException", "fromLink": "Devise/Support/DeviseValidationException.html", "link": "Devise/Support/DeviseValidationException.html#method_getErrors", "name": "Devise\\Support\\DeviseValidationException::getErrors", "doc": "&quot;Access the errors message bag&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support", "fromLink": "Devise/Support.html", "link": "Devise/Support/Framework.html", "name": "Devise\\Support\\Framework", "doc": "&quot;Class Framework wraps important components that we\nuse from Laravel&#039;s framework. Components like Config,\nValidator, Request, Response.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Framework", "fromLink": "Devise/Support/Framework.html", "link": "Devise/Support/Framework.html#method___get", "name": "Devise\\Support\\Framework::__get", "doc": "&quot;Magic method so we can call $this-&gt;Config instead of $this-&gt;Config()&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Installer", "fromLink": "Devise/Support/Installer.html", "link": "Devise/Support/Installer/DatabaseCreator.html", "name": "Devise\\Support\\Installer\\DatabaseCreator", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Installer\\DatabaseCreator", "fromLink": "Devise/Support/Installer/DatabaseCreator.html", "link": "Devise/Support/Installer/DatabaseCreator.html#method___construct", "name": "Devise\\Support\\Installer\\DatabaseCreator::__construct", "doc": "&quot;Create a new database creator&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\DatabaseCreator", "fromLink": "Devise/Support/Installer/DatabaseCreator.html", "link": "Devise/Support/Installer/DatabaseCreator.html#method_createDatabase", "name": "Devise\\Support\\Installer\\DatabaseCreator::createDatabase", "doc": "&quot;Create a new database from given settings&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Installer", "fromLink": "Devise/Support/Installer.html", "link": "Devise/Support/Installer/InstallWizard.html", "name": "Devise\\Support\\Installer\\InstallWizard", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method___construct", "name": "Devise\\Support\\Installer\\InstallWizard::__construct", "doc": "&quot;Creats a new Install Wizard.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_validateAdminUser", "name": "Devise\\Support\\Installer\\InstallWizard::validateAdminUser", "doc": "&quot;Validates the admin user data for us&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_createAdminUser", "name": "Devise\\Support\\Installer\\InstallWizard::createAdminUser", "doc": "&quot;Create the admin user for the installer. This will\ncreate the user with the email and password given\nand then it will also put that user into the admin\ngroup&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_saveConfigsOverride", "name": "Devise\\Support\\Installer\\InstallWizard::saveConfigsOverride", "doc": "&quot;Save input value submitted for \&quot;configs&lt;em&gt;override\&quot; to the\nkey \&quot;CONFIGS&lt;\/em&gt;OVERRIDE\&quot; in .env file&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_saveNewApplicationKey", "name": "Devise\\Support\\Installer\\InstallWizard::saveNewApplicationKey", "doc": "&quot;Saves the new application key if there isn&#039;t already one set\nWe need this set early on so it doesn&#039;t screw up our tokens\nand password hashes.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_saveApplicationNamespace", "name": "Devise\\Support\\Installer\\InstallWizard::saveApplicationNamespace", "doc": "&quot;Saves this app name&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_saveEnvironment", "name": "Devise\\Support\\Installer\\InstallWizard::saveEnvironment", "doc": "&quot;Saves the environment for us&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_saveApplicationMigrationAndSeedSettings", "name": "Devise\\Support\\Installer\\InstallWizard::saveApplicationMigrationAndSeedSettings", "doc": "&quot;Save the migration and seed settings&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_saveDatabase", "name": "Devise\\Support\\Installer\\InstallWizard::saveDatabase", "doc": "&quot;Saves the database settings for us&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_installDevise", "name": "Devise\\Support\\Installer\\InstallWizard::installDevise", "doc": "&quot;[installDevise description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_checkAssets", "name": "Devise\\Support\\Installer\\InstallWizard::checkAssets", "doc": "&quot;[checkAssets description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_installAssets", "name": "Devise\\Support\\Installer\\InstallWizard::installAssets", "doc": "&quot;[installAssets description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallWizard", "fromLink": "Devise/Support/Installer/InstallWizard.html", "link": "Devise/Support/Installer/InstallWizard.html#method_refreshEnvironment", "name": "Devise\\Support\\Installer\\InstallWizard::refreshEnvironment", "doc": "&quot;Reloads env settings and also updates the configurations\nin Laravel for anything that might change during the install\nprocess. Things like app.key, app.debug, database stuff, mail\nstuff, cache and session settings.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Installer", "fromLink": "Devise/Support/Installer.html", "link": "Devise/Support/Installer/InstallerController.html", "name": "Devise\\Support\\Installer\\InstallerController", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method___construct", "name": "Devise\\Support\\Installer\\InstallerController::__construct", "doc": "&quot;[__construct description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_getIndex", "name": "Devise\\Support\\Installer\\InstallerController::getIndex", "doc": "&quot;Welcome the installer\/admin&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_getWelcome", "name": "Devise\\Support\\Installer\\InstallerController::getWelcome", "doc": "&quot;Welcome the installer\/admin&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_getInformInstallAssets", "name": "Devise\\Support\\Installer\\InstallerController::getInformInstallAssets", "doc": "&quot;[getInformInstallAssets description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_getAssets", "name": "Devise\\Support\\Installer\\InstallerController::getAssets", "doc": "&quot;[getAssets description]&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_getEnvironment", "name": "Devise\\Support\\Installer\\InstallerController::getEnvironment", "doc": "&quot;Show environment page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_postEnvironment", "name": "Devise\\Support\\Installer\\InstallerController::postEnvironment", "doc": "&quot;Save the environment&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_getDatabase", "name": "Devise\\Support\\Installer\\InstallerController::getDatabase", "doc": "&quot;Show the database page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_postDatabase", "name": "Devise\\Support\\Installer\\InstallerController::postDatabase", "doc": "&quot;Save the database&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_getApplication", "name": "Devise\\Support\\Installer\\InstallerController::getApplication", "doc": "&quot;Sets up the application&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_postApplication", "name": "Devise\\Support\\Installer\\InstallerController::postApplication", "doc": "&quot;Save the application setup&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_getCreateUser", "name": "Devise\\Support\\Installer\\InstallerController::getCreateUser", "doc": "&quot;Show the create user page&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Installer\\InstallerController", "fromLink": "Devise/Support/Installer/InstallerController.html", "link": "Devise/Support/Installer/InstallerController.html#method_postCreateUser", "name": "Devise\\Support\\Installer\\InstallerController::postCreateUser", "doc": "&quot;Save the new user and redirect them to the\nsettings wizard&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Middleware", "fromLink": "Devise/Support/Middleware.html", "link": "Devise/Support/Middleware/VerifyCsrfToken.html", "name": "Devise\\Support\\Middleware\\VerifyCsrfToken", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Middleware\\VerifyCsrfToken", "fromLink": "Devise/Support/Middleware/VerifyCsrfToken.html", "link": "Devise/Support/Middleware/VerifyCsrfToken.html#method_handle", "name": "Devise\\Support\\Middleware\\VerifyCsrfToken::handle", "doc": "&quot;Handle an incoming request.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Sortable", "fromLink": "Devise/Support/Sortable.html", "link": "Devise/Support/Sortable/EloquentBuilder.html", "name": "Devise\\Support\\Sortable\\EloquentBuilder", "doc": "&quot;Class EloquentBuilder is ran on paginate queries only and takes\nthe liberty of sorting and filtering results for us smartly and\nmagically.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Sortable\\EloquentBuilder", "fromLink": "Devise/Support/Sortable/EloquentBuilder.html", "link": "Devise/Support/Sortable/EloquentBuilder.html#method_paginate", "name": "Devise\\Support\\Sortable\\EloquentBuilder::paginate", "doc": "&quot;Get a paginator for the \&quot;select\&quot; statement.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Sortable", "fromLink": "Devise/Support/Sortable.html", "link": "Devise/Support/Sortable/Filter.html", "name": "Devise\\Support\\Sortable\\Filter", "doc": "&quot;Class Filter&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Filter", "fromLink": "Devise/Support/Sortable/Filter.html", "link": "Devise/Support/Sortable/Filter.html#method___construct", "name": "Devise\\Support\\Sortable\\Filter::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Filter", "fromLink": "Devise/Support/Sortable/Filter.html", "link": "Devise/Support/Sortable/Filter.html#method_getField", "name": "Devise\\Support\\Sortable\\Filter::getField", "doc": "&quot;Get the field for this Filter, basically\nthe &amp;lt;input type=\&quot;text\&quot; .&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Sortable", "fromLink": "Devise/Support/Sortable.html", "link": "Devise/Support/Sortable/Link.html", "name": "Devise\\Support\\Sortable\\Link", "doc": "&quot;Class Link returns html &lt;a&gt; anchor tags when given parameters\nthis field helps create the up and down sorting links when\nfiltering html table columns&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Link", "fromLink": "Devise/Support/Sortable/Link.html", "link": "Devise/Support/Sortable/Link.html#method___construct", "name": "Devise\\Support\\Sortable\\Link::__construct", "doc": "&quot;Construct a new link&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Link", "fromLink": "Devise/Support/Sortable/Link.html", "link": "Devise/Support/Sortable/Link.html#method_getClearSortLink", "name": "Devise\\Support\\Sortable\\Link::getClearSortLink", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Link", "fromLink": "Devise/Support/Sortable/Link.html", "link": "Devise/Support/Sortable/Link.html#method_getLink", "name": "Devise\\Support\\Sortable\\Link::getLink", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Sortable", "fromLink": "Devise/Support/Sortable.html", "link": "Devise/Support/Sortable/Manager.html", "name": "Devise\\Support\\Sortable\\Manager", "doc": "&quot;Class Manager changes the cookie\/session keys for multisorts&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Manager", "fromLink": "Devise/Support/Sortable/Manager.html", "link": "Devise/Support/Sortable/Manager.html#method_getIsMulti", "name": "Devise\\Support\\Sortable\\Manager::getIsMulti", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Manager", "fromLink": "Devise/Support/Sortable/Manager.html", "link": "Devise/Support/Sortable/Manager.html#method_setIsMulti", "name": "Devise\\Support\\Sortable\\Manager::setIsMulti", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Manager", "fromLink": "Devise/Support/Sortable/Manager.html", "link": "Devise/Support/Sortable/Manager.html#method_getKey", "name": "Devise\\Support\\Sortable\\Manager::getKey", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Manager", "fromLink": "Devise/Support/Sortable/Manager.html", "link": "Devise/Support/Sortable/Manager.html#method_setKey", "name": "Devise\\Support\\Sortable\\Manager::setKey", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Manager", "fromLink": "Devise/Support/Sortable/Manager.html", "link": "Devise/Support/Sortable/Manager.html#method_addToStack", "name": "Devise\\Support\\Sortable\\Manager::addToStack", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Manager", "fromLink": "Devise/Support/Sortable/Manager.html", "link": "Devise/Support/Sortable/Manager.html#method_removeFromStack", "name": "Devise\\Support\\Sortable\\Manager::removeFromStack", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Manager", "fromLink": "Devise/Support/Sortable/Manager.html", "link": "Devise/Support/Sortable/Manager.html#method_getStack", "name": "Devise\\Support\\Sortable\\Manager::getStack", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Manager", "fromLink": "Devise/Support/Sortable/Manager.html", "link": "Devise/Support/Sortable/Manager.html#method_clearStack", "name": "Devise\\Support\\Sortable\\Manager::clearStack", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Sortable", "fromLink": "Devise/Support/Sortable.html", "link": "Devise/Support/Sortable/Sort.html", "name": "Devise\\Support\\Sortable\\Sort", "doc": "&quot;Class Sort handles creating links and filters for us which&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Sort", "fromLink": "Devise/Support/Sortable/Sort.html", "link": "Devise/Support/Sortable/Sort.html#method_link", "name": "Devise\\Support\\Sortable\\Sort::link", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Sort", "fromLink": "Devise/Support/Sortable/Sort.html", "link": "Devise/Support/Sortable/Sort.html#method_clearSortLink", "name": "Devise\\Support\\Sortable\\Sort::clearSortLink", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Sort", "fromLink": "Devise/Support/Sortable/Sort.html", "link": "Devise/Support/Sortable/Sort.html#method_filter", "name": "Devise\\Support\\Sortable\\Sort::filter", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Sort", "fromLink": "Devise/Support/Sortable/Sort.html", "link": "Devise/Support/Sortable/Sort.html#method_setDefaultOrderBy", "name": "Devise\\Support\\Sortable\\Sort::setDefaultOrderBy", "doc": "&quot;Sets the default value of defaultOrderBy&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Sort", "fromLink": "Devise/Support/Sortable/Sort.html", "link": "Devise/Support/Sortable/Sort.html#method_handleSorting", "name": "Devise\\Support\\Sortable\\Sort::handleSorting", "doc": "&quot;Ads orderBy to the current query in builder&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Sort", "fromLink": "Devise/Support/Sortable/Sort.html", "link": "Devise/Support/Sortable/Sort.html#method_handleFiltering", "name": "Devise\\Support\\Sortable\\Sort::handleFiltering", "doc": "&quot;We process filtering on this query if there\nis any $this-&gt;Input-&gt;get() found for dvs-filters\nthis is used in Sortable\\Database\\Eloquent\\Builder.paginate&quot;"},
            
            {"type": "Trait", "fromName": "Devise\\Support\\Sortable", "fromLink": "Devise/Support/Sortable.html", "link": "Devise/Support/Sortable/Sortable.html", "name": "Devise\\Support\\Sortable\\Sortable", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Sortable\\Sortable", "fromLink": "Devise/Support/Sortable/Sortable.html", "link": "Devise/Support/Sortable/Sortable.html#method_newQuery", "name": "Devise\\Support\\Sortable\\Sortable::newQuery", "doc": "&quot;Get a new query builder for the model&#039;s table.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support\\Sortable", "fromLink": "Devise/Support/Sortable.html", "link": "Devise/Support/Sortable/SortableFacade.html", "name": "Devise\\Support\\Sortable\\SortableFacade", "doc": "&quot;Class SortableFacade&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Support\\Sortable", "fromLink": "Devise/Support/Sortable.html", "link": "Devise/Support/Sortable/SortableServiceProvider.html", "name": "Devise\\Support\\Sortable\\SortableServiceProvider", "doc": "&quot;Class SortableServiceProvider registers the Sort facade\non the Laravel container&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Sortable\\SortableServiceProvider", "fromLink": "Devise/Support/Sortable/SortableServiceProvider.html", "link": "Devise/Support/Sortable/SortableServiceProvider.html#method_boot", "name": "Devise\\Support\\Sortable\\SortableServiceProvider::boot", "doc": "&quot;Bootstrap the application events.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\SortableServiceProvider", "fromLink": "Devise/Support/Sortable/SortableServiceProvider.html", "link": "Devise/Support/Sortable/SortableServiceProvider.html#method_register", "name": "Devise\\Support\\Sortable\\SortableServiceProvider::register", "doc": "&quot;Register the service provider.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\Sortable\\SortableServiceProvider", "fromLink": "Devise/Support/Sortable/SortableServiceProvider.html", "link": "Devise/Support/Sortable/SortableServiceProvider.html#method_provides", "name": "Devise\\Support\\Sortable\\SortableServiceProvider::provides", "doc": "&quot;Get the services provided by the provider.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support", "fromLink": "Devise/Support.html", "link": "Devise/Support/Str.html", "name": "Devise\\Support\\Str", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\Str", "fromLink": "Devise/Support/Str.html", "link": "Devise/Support/Str.html#method_replaceBetween", "name": "Devise\\Support\\Str::replaceBetween", "doc": "&quot;Replace the $needle strings within the $haystack with whatever the\n$replacementMethod tells us. Replacement method will be given a\n$between variable&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Support", "fromLink": "Devise/Support.html", "link": "Devise/Support/SupportServiceProvider.html", "name": "Devise\\Support\\SupportServiceProvider", "doc": "&quot;Class SupportServiceProvider registers support components of\nDevise and other helpers that Devise uses.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Support\\SupportServiceProvider", "fromLink": "Devise/Support/SupportServiceProvider.html", "link": "Devise/Support/SupportServiceProvider.html#method_boot", "name": "Devise\\Support\\SupportServiceProvider::boot", "doc": "&quot;Bootstrap the application events.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\SupportServiceProvider", "fromLink": "Devise/Support/SupportServiceProvider.html", "link": "Devise/Support/SupportServiceProvider.html#method_register", "name": "Devise\\Support\\SupportServiceProvider::register", "doc": "&quot;Register the service provider.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Support\\SupportServiceProvider", "fromLink": "Devise/Support/SupportServiceProvider.html", "link": "Devise/Support/SupportServiceProvider.html#method_provides", "name": "Devise\\Support\\SupportServiceProvider::provides", "doc": "&quot;Get the services provided by the provider.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Templates", "fromLink": "Devise/Templates.html", "link": "Devise/Templates/DeviseTemplateNotFoundException.html", "name": "Devise\\Templates\\DeviseTemplateNotFoundException", "doc": "&quot;Class DeviseTemplateNotFoundException is thrown in the case where\ndevise templates.php config is missing the a view path&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Templates", "fromLink": "Devise/Templates.html", "link": "Devise/Templates/TemplatesManager.html", "name": "Devise\\Templates\\TemplatesManager", "doc": "&quot;Class TemplatesManager manages updating templates,\nremoving and additional admin functions&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Templates\\TemplatesManager", "fromLink": "Devise/Templates/TemplatesManager.html", "link": "Devise/Templates/TemplatesManager.html#method___construct", "name": "Devise\\Templates\\TemplatesManager::__construct", "doc": "&quot;Construct a new template manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesManager", "fromLink": "Devise/Templates/TemplatesManager.html", "link": "Devise/Templates/TemplatesManager.html#method_registerRules", "name": "Devise\\Templates\\TemplatesManager::registerRules", "doc": "&quot;Validation rules for registering a new template&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesManager", "fromLink": "Devise/Templates/TemplatesManager.html", "link": "Devise/Templates/TemplatesManager.html#method_storeTemplate", "name": "Devise\\Templates\\TemplatesManager::storeTemplate", "doc": "&quot;Validate and store a template entry to templates config&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesManager", "fromLink": "Devise/Templates/TemplatesManager.html", "link": "Devise/Templates/TemplatesManager.html#method_storeMultipleTemplates", "name": "Devise\\Templates\\TemplatesManager::storeMultipleTemplates", "doc": "&quot;Validate and store multiple template entries to templates config&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesManager", "fromLink": "Devise/Templates/TemplatesManager.html", "link": "Devise/Templates/TemplatesManager.html#method_updateTemplate", "name": "Devise\\Templates\\TemplatesManager::updateTemplate", "doc": "&quot;Validates and updates a template with the given input&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesManager", "fromLink": "Devise/Templates/TemplatesManager.html", "link": "Devise/Templates/TemplatesManager.html#method_destroyTemplate", "name": "Devise\\Templates\\TemplatesManager::destroyTemplate", "doc": "&quot;Destroys a template by retrieving current config contents and\nunsetting the key (templatePath) then saving the updated contents&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesManager", "fromLink": "Devise/Templates/TemplatesManager.html", "link": "Devise/Templates/TemplatesManager.html#method_createVarRules", "name": "Devise\\Templates\\TemplatesManager::createVarRules", "doc": "&quot;Validation rules for registering a new template&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesManager", "fromLink": "Devise/Templates/TemplatesManager.html", "link": "Devise/Templates/TemplatesManager.html#method_storeNewVariable", "name": "Devise\\Templates\\TemplatesManager::storeNewVariable", "doc": "&quot;Validate and store a new variable for a given template path&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Templates", "fromLink": "Devise/Templates.html", "link": "Devise/Templates/TemplatesRepository.html", "name": "Devise\\Templates\\TemplatesRepository", "doc": "&quot;Class TemplatesRepository is used to retrieve template data&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Templates\\TemplatesRepository", "fromLink": "Devise/Templates/TemplatesRepository.html", "link": "Devise/Templates/TemplatesRepository.html#method___construct", "name": "Devise\\Templates\\TemplatesRepository::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesRepository", "fromLink": "Devise/Templates/TemplatesRepository.html", "link": "Devise/Templates/TemplatesRepository.html#method_getTemplateByPath", "name": "Devise\\Templates\\TemplatesRepository::getTemplateByPath", "doc": "&quot;Get template and any related data by using its template path\nto retrieve its related data from the templates config&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesRepository", "fromLink": "Devise/Templates/TemplatesRepository.html", "link": "Devise/Templates/TemplatesRepository.html#method_allTemplatesPaginated", "name": "Devise\\Templates\\TemplatesRepository::allTemplatesPaginated", "doc": "&quot;Get an array of all template paths and human names&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesRepository", "fromLink": "Devise/Templates/TemplatesRepository.html", "link": "Devise/Templates/TemplatesRepository.html#method_registeredTemplatesList", "name": "Devise\\Templates\\TemplatesRepository::registeredTemplatesList", "doc": "&quot;Get an array of all registered templates as an array of paths\nand human names; registered means already in templates config&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesRepository", "fromLink": "Devise/Templates/TemplatesRepository.html", "link": "Devise/Templates/TemplatesRepository.html#method_unregisteredTemplatesList", "name": "Devise\\Templates\\TemplatesRepository::unregisteredTemplatesList", "doc": "&quot;Get list of unregistered templates by finding all app template files\nwhich are not stored (do not have path key) in the templates config&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesRepository", "fromLink": "Devise/Templates/TemplatesRepository.html", "link": "Devise/Templates/TemplatesRepository.html#method_compileAllUsedVars", "name": "Devise\\Templates\\TemplatesRepository::compileAllUsedVars", "doc": "&quot;compiles an array of all of the variables used in the application&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Templates", "fromLink": "Devise/Templates.html", "link": "Devise/Templates/TemplatesResponseHandler.html", "name": "Devise\\Templates\\TemplatesResponseHandler", "doc": "&quot;Class TemplatesResponseHandler is used to retrieve template data&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Templates\\TemplatesResponseHandler", "fromLink": "Devise/Templates/TemplatesResponseHandler.html", "link": "Devise/Templates/TemplatesResponseHandler.html#method___construct", "name": "Devise\\Templates\\TemplatesResponseHandler::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesResponseHandler", "fromLink": "Devise/Templates/TemplatesResponseHandler.html", "link": "Devise/Templates/TemplatesResponseHandler.html#method_executeStore", "name": "Devise\\Templates\\TemplatesResponseHandler::executeStore", "doc": "&quot;Executes store template method in TemplatesManager\nand properly handles the response.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesResponseHandler", "fromLink": "Devise/Templates/TemplatesResponseHandler.html", "link": "Devise/Templates/TemplatesResponseHandler.html#method_executeUpdate", "name": "Devise\\Templates\\TemplatesResponseHandler::executeUpdate", "doc": "&quot;Executes update template method in TemplatesManager and\nhandles the response accordingly.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesResponseHandler", "fromLink": "Devise/Templates/TemplatesResponseHandler.html", "link": "Devise/Templates/TemplatesResponseHandler.html#method_executeDestroy", "name": "Devise\\Templates\\TemplatesResponseHandler::executeDestroy", "doc": "&quot;Executes destroy template method in TemplatesManager\nand properly handles the response.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Templates\\TemplatesResponseHandler", "fromLink": "Devise/Templates/TemplatesResponseHandler.html", "link": "Devise/Templates/TemplatesResponseHandler.html#method_executeVariableStore", "name": "Devise\\Templates\\TemplatesResponseHandler::executeVariableStore", "doc": "&quot;Executes store variable method from TemplatesManager&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users", "fromLink": "Devise/Users.html", "link": "Devise/Users/DeviseUser.html", "name": "Devise\\Users\\DeviseUser", "doc": "&quot;\n&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Users", "fromLink": "Devise/Users.html", "link": "Devise/Users/DeviseUserController.html", "name": "Devise\\Users\\DeviseUserController", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method___construct", "name": "Devise\\Users\\DeviseUserController::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_index", "name": "Devise\\Users\\DeviseUserController::index", "doc": "&quot;Render users index view&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_create", "name": "Devise\\Users\\DeviseUserController::create", "doc": "&quot;Render user create view&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_store", "name": "Devise\\Users\\DeviseUserController::store", "doc": "&quot;Process user create form data&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_edit", "name": "Devise\\Users\\DeviseUserController::edit", "doc": "&quot;Render user \&quot;edit\&quot; view&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_update", "name": "Devise\\Users\\DeviseUserController::update", "doc": "&quot;Process user edit form data&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_show", "name": "Devise\\Users\\DeviseUserController::show", "doc": "&quot;Render user \&quot;show\&quot; view&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_confirmDestroy", "name": "Devise\\Users\\DeviseUserController::confirmDestroy", "doc": "&quot;Render \&quot;destroy confirmation\&quot; view&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_postDestroy", "name": "Devise\\Users\\DeviseUserController::postDestroy", "doc": "&quot;Destroy user record&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_editPassword", "name": "Devise\\Users\\DeviseUserController::editPassword", "doc": "&quot;Render \&quot;edit password\&quot; form&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_updatePassword", "name": "Devise\\Users\\DeviseUserController::updatePassword", "doc": "&quot;Process edit password form data&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_login", "name": "Devise\\Users\\DeviseUserController::login", "doc": "&quot;Render login view&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_postLogin", "name": "Devise\\Users\\DeviseUserController::postLogin", "doc": "&quot;Process login form data&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_postLogout", "name": "Devise\\Users\\DeviseUserController::postLogout", "doc": "&quot;Process user log out&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_register", "name": "Devise\\Users\\DeviseUserController::register", "doc": "&quot;Render user registration form&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_postRegister", "name": "Devise\\Users\\DeviseUserController::postRegister", "doc": "&quot;Process user registration form data&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_forgotPassword", "name": "Devise\\Users\\DeviseUserController::forgotPassword", "doc": "&quot;Renders forgot password view&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_resendActivation", "name": "Devise\\Users\\DeviseUserController::resendActivation", "doc": "&quot;Renders resend user activation email&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_postResendActivation", "name": "Devise\\Users\\DeviseUserController::postResendActivation", "doc": "&quot;Handle POST data from resend activation form&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_remind", "name": "Devise\\Users\\DeviseUserController::remind", "doc": "&quot;Display the password reminder view.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_postRemind", "name": "Devise\\Users\\DeviseUserController::postRemind", "doc": "&quot;Handle a POST request to remind a user of their password.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_reset", "name": "Devise\\Users\\DeviseUserController::reset", "doc": "&quot;Display the password reset view for the given token.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_postReset", "name": "Devise\\Users\\DeviseUserController::postReset", "doc": "&quot;Handle a POST request to reset a user&#039;s password.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_activate", "name": "Devise\\Users\\DeviseUserController::activate", "doc": "&quot;Handle activation of user account&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\DeviseUserController", "fromLink": "Devise/Users/DeviseUserController.html", "link": "Devise/Users/DeviseUserController.html#method_clearUnactivatedUsers", "name": "Devise\\Users\\DeviseUserController::clearUnactivatedUsers", "doc": "&quot;Clears records of unactivated users&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users\\Groups", "fromLink": "Devise/Users/Groups.html", "link": "Devise/Users/Groups/GroupManager.html", "name": "Devise\\Users\\Groups\\GroupManager", "doc": "&quot;Class GroupManager manages the creating,\nupdating, and removing of groups.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupManager", "fromLink": "Devise/Users/Groups/GroupManager.html", "link": "Devise/Users/Groups/GroupManager.html#method___construct", "name": "Devise\\Users\\Groups\\GroupManager::__construct", "doc": "&quot;Construct a new Group manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupManager", "fromLink": "Devise/Users/Groups/GroupManager.html", "link": "Devise/Users/Groups/GroupManager.html#method_createRules", "name": "Devise\\Users\\Groups\\GroupManager::createRules", "doc": "&quot;Create validation rules&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupManager", "fromLink": "Devise/Users/Groups/GroupManager.html", "link": "Devise/Users/Groups/GroupManager.html#method_createGroup", "name": "Devise\\Users\\Groups\\GroupManager::createGroup", "doc": "&quot;Create a new Group&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupManager", "fromLink": "Devise/Users/Groups/GroupManager.html", "link": "Devise/Users/Groups/GroupManager.html#method_updateRules", "name": "Devise\\Users\\Groups\\GroupManager::updateRules", "doc": "&quot;Update validation rules&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupManager", "fromLink": "Devise/Users/Groups/GroupManager.html", "link": "Devise/Users/Groups/GroupManager.html#method_updateGroup", "name": "Devise\\Users\\Groups\\GroupManager::updateGroup", "doc": "&quot;Update a new Group&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupManager", "fromLink": "Devise/Users/Groups/GroupManager.html", "link": "Devise/Users/Groups/GroupManager.html#method_destroyGroup", "name": "Devise\\Users\\Groups\\GroupManager::destroyGroup", "doc": "&quot;Delete a Group&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users\\Groups", "fromLink": "Devise/Users/Groups.html", "link": "Devise/Users/Groups/GroupsRepository.html", "name": "Devise\\Users\\Groups\\GroupsRepository", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupsRepository", "fromLink": "Devise/Users/Groups/GroupsRepository.html", "link": "Devise/Users/Groups/GroupsRepository.html#method___construct", "name": "Devise\\Users\\Groups\\GroupsRepository::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupsRepository", "fromLink": "Devise/Users/Groups/GroupsRepository.html", "link": "Devise/Users/Groups/GroupsRepository.html#method_findById", "name": "Devise\\Users\\Groups\\GroupsRepository::findById", "doc": "&quot;Find group by id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupsRepository", "fromLink": "Devise/Users/Groups/GroupsRepository.html", "link": "Devise/Users/Groups/GroupsRepository.html#method_findByName", "name": "Devise\\Users\\Groups\\GroupsRepository::findByName", "doc": "&quot;Find group by name&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupsRepository", "fromLink": "Devise/Users/Groups/GroupsRepository.html", "link": "Devise/Users/Groups/GroupsRepository.html#method_groupList", "name": "Devise\\Users\\Groups\\GroupsRepository::groupList", "doc": "&quot;List all the groups&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupsRepository", "fromLink": "Devise/Users/Groups/GroupsRepository.html", "link": "Devise/Users/Groups/GroupsRepository.html#method_groups", "name": "Devise\\Users\\Groups\\GroupsRepository::groups", "doc": "&quot;Paginated list of groups&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupsRepository", "fromLink": "Devise/Users/Groups/GroupsRepository.html", "link": "Devise/Users/Groups/GroupsRepository.html#method_groupListForUser", "name": "Devise\\Users\\Groups\\GroupsRepository::groupListForUser", "doc": "&quot;Get a list of groups for the given user id&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users\\Groups", "fromLink": "Devise/Users/Groups.html", "link": "Devise/Users/Groups/GroupsResponseHandler.html", "name": "Devise\\Users\\Groups\\GroupsResponseHandler", "doc": "&quot;\n&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupsResponseHandler", "fromLink": "Devise/Users/Groups/GroupsResponseHandler.html", "link": "Devise/Users/Groups/GroupsResponseHandler.html#method___construct", "name": "Devise\\Users\\Groups\\GroupsResponseHandler::__construct", "doc": "&quot;Construct new response handler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupsResponseHandler", "fromLink": "Devise/Users/Groups/GroupsResponseHandler.html", "link": "Devise/Users/Groups/GroupsResponseHandler.html#method_requestCreateGroup", "name": "Devise\\Users\\Groups\\GroupsResponseHandler::requestCreateGroup", "doc": "&quot;Create a new user request&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupsResponseHandler", "fromLink": "Devise/Users/Groups/GroupsResponseHandler.html", "link": "Devise/Users/Groups/GroupsResponseHandler.html#method_requestUpdateGroup", "name": "Devise\\Users\\Groups\\GroupsResponseHandler::requestUpdateGroup", "doc": "&quot;Update a group&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Groups\\GroupsResponseHandler", "fromLink": "Devise/Users/Groups/GroupsResponseHandler.html", "link": "Devise/Users/Groups/GroupsResponseHandler.html#method_requestDestroyGroup", "name": "Devise\\Users\\Groups\\GroupsResponseHandler::requestDestroyGroup", "doc": "&quot;Delete a group&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users\\Permissions", "fromLink": "Devise/Users/Permissions.html", "link": "Devise/Users/Permissions/PermissionsManager.html", "name": "Devise\\Users\\Permissions\\PermissionsManager", "doc": "&quot;Class PermissionsManager manages updating permissions,\nremoving and additional admin functions&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsManager", "fromLink": "Devise/Users/Permissions/PermissionsManager.html", "link": "Devise/Users/Permissions/PermissionsManager.html#method___construct", "name": "Devise\\Users\\Permissions\\PermissionsManager::__construct", "doc": "&quot;Construct a new permission manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsManager", "fromLink": "Devise/Users/Permissions/PermissionsManager.html", "link": "Devise/Users/Permissions/PermissionsManager.html#method_createRules", "name": "Devise\\Users\\Permissions\\PermissionsManager::createRules", "doc": "&quot;Create rules for a new permission&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsManager", "fromLink": "Devise/Users/Permissions/PermissionsManager.html", "link": "Devise/Users/Permissions/PermissionsManager.html#method_updateRules", "name": "Devise\\Users\\Permissions\\PermissionsManager::updateRules", "doc": "&quot;Create rules to edit a permission&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsManager", "fromLink": "Devise/Users/Permissions/PermissionsManager.html", "link": "Devise/Users/Permissions/PermissionsManager.html#method_storePermission", "name": "Devise\\Users\\Permissions\\PermissionsManager::storePermission", "doc": "&quot;Validates and updates a permission with the given input&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsManager", "fromLink": "Devise/Users/Permissions/PermissionsManager.html", "link": "Devise/Users/Permissions/PermissionsManager.html#method_updatePermission", "name": "Devise\\Users\\Permissions\\PermissionsManager::updatePermission", "doc": "&quot;Validates and updates a permission with the given input&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsManager", "fromLink": "Devise/Users/Permissions/PermissionsManager.html", "link": "Devise/Users/Permissions/PermissionsManager.html#method_destroyPermission", "name": "Devise\\Users\\Permissions\\PermissionsManager::destroyPermission", "doc": "&quot;Destroys a permission by retrieving current config contents and\nunsetting the key (condition) then saving the updated contents&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users\\Permissions", "fromLink": "Devise/Users/Permissions.html", "link": "Devise/Users/Permissions/PermissionsRepository.html", "name": "Devise\\Users\\Permissions\\PermissionsRepository", "doc": "&quot;Class PermissionsRepository is used to retrieve permission data&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsRepository", "fromLink": "Devise/Users/Permissions/PermissionsRepository.html", "link": "Devise/Users/Permissions/PermissionsRepository.html#method___construct", "name": "Devise\\Users\\Permissions\\PermissionsRepository::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsRepository", "fromLink": "Devise/Users/Permissions/PermissionsRepository.html", "link": "Devise/Users/Permissions/PermissionsRepository.html#method_getAllPermissions", "name": "Devise\\Users\\Permissions\\PermissionsRepository::getAllPermissions", "doc": "&quot;Get all permissions from current permissions config&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsRepository", "fromLink": "Devise/Users/Permissions/PermissionsRepository.html", "link": "Devise/Users/Permissions/PermissionsRepository.html#method_availablePermissions", "name": "Devise\\Users\\Permissions\\PermissionsRepository::availablePermissions", "doc": "&quot;Get all the available permissions we can pick from\non the menu items list&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsRepository", "fromLink": "Devise/Users/Permissions/PermissionsRepository.html", "link": "Devise/Users/Permissions/PermissionsRepository.html#method_getPermissionByPath", "name": "Devise\\Users\\Permissions\\PermissionsRepository::getPermissionByPath", "doc": "&quot;Get permission and any related data by using its permission path\nto retrieve its related data from the permissions config&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsRepository", "fromLink": "Devise/Users/Permissions/PermissionsRepository.html", "link": "Devise/Users/Permissions/PermissionsRepository.html#method_allPermissionsPaginated", "name": "Devise\\Users\\Permissions\\PermissionsRepository::allPermissionsPaginated", "doc": "&quot;Get an array of all permission paths and human names&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsRepository", "fromLink": "Devise/Users/Permissions/PermissionsRepository.html", "link": "Devise/Users/Permissions/PermissionsRepository.html#method_availableRulesList", "name": "Devise\\Users\\Permissions\\PermissionsRepository::availableRulesList", "doc": "&quot;Uses available rules from Devise\\Users\\Permissions\\RuleManager Class to build options for select&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsRepository", "fromLink": "Devise/Users/Permissions/PermissionsRepository.html", "link": "Devise/Users/Permissions/PermissionsRepository.html#method_getRuleParamMap", "name": "Devise\\Users\\Permissions\\PermissionsRepository::getRuleParamMap", "doc": "&quot;Uses array of rule names to create a map of names to paramter count&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users\\Permissions", "fromLink": "Devise/Users/Permissions.html", "link": "Devise/Users/Permissions/PermissionsResponseHandler.html", "name": "Devise\\Users\\Permissions\\PermissionsResponseHandler", "doc": "&quot;Class PermissionsResponseHandler is used to retrieve permission data&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsResponseHandler", "fromLink": "Devise/Users/Permissions/PermissionsResponseHandler.html", "link": "Devise/Users/Permissions/PermissionsResponseHandler.html#method___construct", "name": "Devise\\Users\\Permissions\\PermissionsResponseHandler::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsResponseHandler", "fromLink": "Devise/Users/Permissions/PermissionsResponseHandler.html", "link": "Devise/Users/Permissions/PermissionsResponseHandler.html#method_executeStore", "name": "Devise\\Users\\Permissions\\PermissionsResponseHandler::executeStore", "doc": "&quot;Executes store permission method in PermissionsManager\nand properly handles the response.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsResponseHandler", "fromLink": "Devise/Users/Permissions/PermissionsResponseHandler.html", "link": "Devise/Users/Permissions/PermissionsResponseHandler.html#method_executeUpdate", "name": "Devise\\Users\\Permissions\\PermissionsResponseHandler::executeUpdate", "doc": "&quot;Executes update permission method in PermissionsManager and\nhandles the response accordingly.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\PermissionsResponseHandler", "fromLink": "Devise/Users/Permissions/PermissionsResponseHandler.html", "link": "Devise/Users/Permissions/PermissionsResponseHandler.html#method_executeDestroy", "name": "Devise\\Users\\Permissions\\PermissionsResponseHandler::executeDestroy", "doc": "&quot;Executes destroy permission method in PermissionsManager\nand properly handles the response.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users\\Permissions", "fromLink": "Devise/Users/Permissions.html", "link": "Devise/Users/Permissions/RedirectHandler.html", "name": "Devise\\Users\\Permissions\\RedirectHandler", "doc": "&quot;Class RedirectHandler handles redirecting&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RedirectHandler", "fromLink": "Devise/Users/Permissions/RedirectHandler.html", "link": "Devise/Users/Permissions/RedirectHandler.html#method___construct", "name": "Devise\\Users\\Permissions\\RedirectHandler::__construct", "doc": "&quot;Construct a new redirector&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RedirectHandler", "fromLink": "Devise/Users/Permissions/RedirectHandler.html", "link": "Devise/Users/Permissions/RedirectHandler.html#method_redirect", "name": "Devise\\Users\\Permissions\\RedirectHandler::redirect", "doc": "&quot;The redirect handles redirecting appropriately based on the\ncondition object passed in. The condition object is a json like\nstdClass object that mimics the arrays inside of config\/permissions-conditions&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users\\Permissions", "fromLink": "Devise/Users/Permissions.html", "link": "Devise/Users/Permissions/RuleList.html", "name": "Devise\\Users\\Permissions\\RuleList", "doc": "&quot;Class RuleList maintains list of built-in and user defined functions (in\npermissions-conditions config) which can be checked using DeviseUser Facade.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleList", "fromLink": "Devise/Users/Permissions/RuleList.html", "link": "Devise/Users/Permissions/RuleList.html#method___construct", "name": "Devise\\Users\\Permissions\\RuleList::__construct", "doc": "&quot;Construct a new RuleList&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleList", "fromLink": "Devise/Users/Permissions/RuleList.html", "link": "Devise/Users/Permissions/RuleList.html#method___call", "name": "Devise\\Users\\Permissions\\RuleList::__call", "doc": "&quot;Handle execution of the different types of methods&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users\\Permissions", "fromLink": "Devise/Users/Permissions.html", "link": "Devise/Users/Permissions/RuleManager.html", "name": "Devise\\Users\\Permissions\\RuleManager", "doc": "&quot;Class RuleManager manages retrieval, creation\/addition, execution\nand evaluation of native and user-defined rules.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleManager", "fromLink": "Devise/Users/Permissions/RuleManager.html", "link": "Devise/Users/Permissions/RuleManager.html#method___construct", "name": "Devise\\Users\\Permissions\\RuleManager::__construct", "doc": "&quot;Construct a new rule manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleManager", "fromLink": "Devise/Users/Permissions/RuleManager.html", "link": "Devise/Users/Permissions/RuleManager.html#method_getRules", "name": "Devise\\Users\\Permissions\\RuleManager::getRules", "doc": "&quot;Get all rules&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleManager", "fromLink": "Devise/Users/Permissions/RuleManager.html", "link": "Devise/Users/Permissions/RuleManager.html#method_getNumberOfRequiredParametersForRule", "name": "Devise\\Users\\Permissions\\RuleManager::getNumberOfRequiredParametersForRule", "doc": "&quot;Get all rules&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleManager", "fromLink": "Devise/Users/Permissions/RuleManager.html", "link": "Devise/Users/Permissions/RuleManager.html#method_getClosure", "name": "Devise\\Users\\Permissions\\RuleManager::getClosure", "doc": "&quot;Get all closures&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleManager", "fromLink": "Devise/Users/Permissions/RuleManager.html", "link": "Devise/Users/Permissions/RuleManager.html#method_addRule", "name": "Devise\\Users\\Permissions\\RuleManager::addRule", "doc": "&quot;Add new element to rules array&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleManager", "fromLink": "Devise/Users/Permissions/RuleManager.html", "link": "Devise/Users/Permissions/RuleManager.html#method_overwriteRule", "name": "Devise\\Users\\Permissions\\RuleManager::overwriteRule", "doc": "&quot;Add replaces element in rules array&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleManager", "fromLink": "Devise/Users/Permissions/RuleManager.html", "link": "Devise/Users/Permissions/RuleManager.html#method_getCondition", "name": "Devise\\Users\\Permissions\\RuleManager::getCondition", "doc": "&quot;Retrieve conditions JSON from permission conditions config&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleManager", "fromLink": "Devise/Users/Permissions/RuleManager.html", "link": "Devise/Users/Permissions/RuleManager.html#method_runCondition", "name": "Devise\\Users\\Permissions\\RuleManager::runCondition", "doc": "&quot;Begins condition checking process by retrieving condition\nby name\/key and then executing its contents.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleManager", "fromLink": "Devise/Users/Permissions/RuleManager.html", "link": "Devise/Users/Permissions/RuleManager.html#method_executeCondition", "name": "Devise\\Users\\Permissions\\RuleManager::executeCondition", "doc": "&quot;Executes conditions one at a time and returns result&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Permissions\\RuleManager", "fromLink": "Devise/Users/Permissions/RuleManager.html", "link": "Devise/Users/Permissions/RuleManager.html#method_evaluateResults", "name": "Devise\\Users\\Permissions\\RuleManager::evaluateResults", "doc": "&quot;Determines if access allowed\/denied by checking\nresults array for any occurences of a \&quot;false\&quot; value&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users\\Permissions", "fromLink": "Devise/Users/Permissions.html", "link": "Devise/Users/Permissions/RuleManagerFacade.html", "name": "Devise\\Users\\Permissions\\RuleManagerFacade", "doc": "&quot;\n&quot;"},
                    
            {"type": "Class", "fromName": "Devise\\Users\\Sessions", "fromLink": "Devise/Users/Sessions.html", "link": "Devise/Users/Sessions/SessionsRepository.html", "name": "Devise\\Users\\Sessions\\SessionsRepository", "doc": "&quot;Class SessionsRepository is used to search and retrieve current DvsUser in session\nand things in context of a DvsUser\/DvsGroup.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\Sessions\\SessionsRepository", "fromLink": "Devise/Users/Sessions/SessionsRepository.html", "link": "Devise/Users/Sessions/SessionsRepository.html#method___construct", "name": "Devise\\Users\\Sessions\\SessionsRepository::__construct", "doc": "&quot;Create a new SessionsRepository instance.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Sessions\\SessionsRepository", "fromLink": "Devise/Users/Sessions/SessionsRepository.html", "link": "Devise/Users/Sessions/SessionsRepository.html#method_login", "name": "Devise\\Users\\Sessions\\SessionsRepository::login", "doc": "&quot;Attempty to login a user&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Sessions\\SessionsRepository", "fromLink": "Devise/Users/Sessions/SessionsRepository.html", "link": "Devise/Users/Sessions/SessionsRepository.html#method_logout", "name": "Devise\\Users\\Sessions\\SessionsRepository::logout", "doc": "&quot;Log user out&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Sessions\\SessionsRepository", "fromLink": "Devise/Users/Sessions/SessionsRepository.html", "link": "Devise/Users/Sessions/SessionsRepository.html#method_recoverPassword", "name": "Devise\\Users\\Sessions\\SessionsRepository::recoverPassword", "doc": "&quot;Handle a POST request to recover password&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Sessions\\SessionsRepository", "fromLink": "Devise/Users/Sessions/SessionsRepository.html", "link": "Devise/Users/Sessions/SessionsRepository.html#method_resetPassword", "name": "Devise\\Users\\Sessions\\SessionsRepository::resetPassword", "doc": "&quot;Handle POST data from reset (change) password form&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Sessions\\SessionsRepository", "fromLink": "Devise/Users/Sessions/SessionsRepository.html", "link": "Devise/Users/Sessions/SessionsRepository.html#method_activate", "name": "Devise\\Users\\Sessions\\SessionsRepository::activate", "doc": "&quot;Process user activation request.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Sessions\\SessionsRepository", "fromLink": "Devise/Users/Sessions/SessionsRepository.html", "link": "Devise/Users/Sessions/SessionsRepository.html#method_sendActivationEmail", "name": "Devise\\Users\\Sessions\\SessionsRepository::sendActivationEmail", "doc": "&quot;Send activation email.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Sessions\\SessionsRepository", "fromLink": "Devise/Users/Sessions/SessionsRepository.html", "link": "Devise/Users/Sessions/SessionsRepository.html#method_validateCredentials", "name": "Devise\\Users\\Sessions\\SessionsRepository::validateCredentials", "doc": "&quot;Validate user credentials (without logging user into system)&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\Sessions\\SessionsRepository", "fromLink": "Devise/Users/Sessions/SessionsRepository.html", "link": "Devise/Users/Sessions/SessionsRepository.html#method_getRememberMe", "name": "Devise\\Users\\Sessions\\SessionsRepository::getRememberMe", "doc": "&quot;Get \&quot;remember_me\&quot; field value&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users", "fromLink": "Devise/Users.html", "link": "Devise/Users/UserHelper.html", "name": "Devise\\Users\\UserHelper", "doc": "&quot;Helper allows specific methods to be easily accessible through\nthe DeviseUser facade.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\UserHelper", "fromLink": "Devise/Users/UserHelper.html", "link": "Devise/Users/UserHelper.html#method___construct", "name": "Devise\\Users\\UserHelper::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserHelper", "fromLink": "Devise/Users/UserHelper.html", "link": "Devise/Users/UserHelper.html#method___call", "name": "Devise\\Users\\UserHelper::__call", "doc": "&quot;Magic method to used to catch function(s) not found in RuleManager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserHelper", "fromLink": "Devise/Users/UserHelper.html", "link": "Devise/Users/UserHelper.html#method_currentUser", "name": "Devise\\Users\\UserHelper::currentUser", "doc": "&quot;Convenience function to get current user object&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserHelper", "fromLink": "Devise/Users/UserHelper.html", "link": "Devise/Users/UserHelper.html#method_currentUserId", "name": "Devise\\Users\\UserHelper::currentUserId", "doc": "&quot;Convenience function to get current user&#039;s id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserHelper", "fromLink": "Devise/Users/UserHelper.html", "link": "Devise/Users/UserHelper.html#method_checkConditions", "name": "Devise\\Users\\UserHelper::checkConditions", "doc": "&quot;Convenience function for handing a single condition name or an\narray of multiple condition names.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserHelper", "fromLink": "Devise/Users/UserHelper.html", "link": "Devise/Users/UserHelper.html#method_checkRule", "name": "Devise\\Users\\UserHelper::checkRule", "doc": "&quot;Checks for any user-defined rules\/closures&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users", "fromLink": "Devise/Users.html", "link": "Devise/Users/UserManager.html", "name": "Devise\\Users\\UserManager", "doc": "&quot;Class UserManager manages the creating of new users,\nupdating existing users and removing users.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\UserManager", "fromLink": "Devise/Users/UserManager.html", "link": "Devise/Users/UserManager.html#method___construct", "name": "Devise\\Users\\UserManager::__construct", "doc": "&quot;Construct a new user manager&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserManager", "fromLink": "Devise/Users/UserManager.html", "link": "Devise/Users/UserManager.html#method_createRules", "name": "Devise\\Users\\UserManager::createRules", "doc": "&quot;Create rules for a new user&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserManager", "fromLink": "Devise/Users/UserManager.html", "link": "Devise/Users/UserManager.html#method_createUser", "name": "Devise\\Users\\UserManager::createUser", "doc": "&quot;Create a new user&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserManager", "fromLink": "Devise/Users/UserManager.html", "link": "Devise/Users/UserManager.html#method_updateRules", "name": "Devise\\Users\\UserManager::updateRules", "doc": "&quot;These are update rules for a user&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserManager", "fromLink": "Devise/Users/UserManager.html", "link": "Devise/Users/UserManager.html#method_updateUser", "name": "Devise\\Users\\UserManager::updateUser", "doc": "&quot;Update a new user&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserManager", "fromLink": "Devise/Users/UserManager.html", "link": "Devise/Users/UserManager.html#method_destroyUser", "name": "Devise\\Users\\UserManager::destroyUser", "doc": "&quot;Delete a user&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserManager", "fromLink": "Devise/Users/UserManager.html", "link": "Devise/Users/UserManager.html#method_registerUser", "name": "Devise\\Users\\UserManager::registerUser", "doc": "&quot;Register new user&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserManager", "fromLink": "Devise/Users/UserManager.html", "link": "Devise/Users/UserManager.html#method_activate", "name": "Devise\\Users\\UserManager::activate", "doc": "&quot;Activate instance of DvsUser&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserManager", "fromLink": "Devise/Users/UserManager.html", "link": "Devise/Users/UserManager.html#method_generateActivateCode", "name": "Devise\\Users\\UserManager::generateActivateCode", "doc": "&quot;Generate a random \&quot;activate_code\&quot; string&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserManager", "fromLink": "Devise/Users/UserManager.html", "link": "Devise/Users/UserManager.html#method_removeUnactivatedUsers", "name": "Devise\\Users\\UserManager::removeUnactivatedUsers", "doc": "&quot;Removes users which have been awaiting activation (after\nregistering). Currently, default is 30 days outstanding&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users", "fromLink": "Devise/Users.html", "link": "Devise/Users/UserServiceProvider.html", "name": "Devise\\Users\\UserServiceProvider", "doc": "&quot;Class UserServiceProvider registers the devise user, rulelist and rulemanager\nfacades&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\UserServiceProvider", "fromLink": "Devise/Users/UserServiceProvider.html", "link": "Devise/Users/UserServiceProvider.html#method_boot", "name": "Devise\\Users\\UserServiceProvider::boot", "doc": "&quot;Bootstrap the application events.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserServiceProvider", "fromLink": "Devise/Users/UserServiceProvider.html", "link": "Devise/Users/UserServiceProvider.html#method_register", "name": "Devise\\Users\\UserServiceProvider::register", "doc": "&quot;Register the service provider.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UserServiceProvider", "fromLink": "Devise/Users/UserServiceProvider.html", "link": "Devise/Users/UserServiceProvider.html#method_provides", "name": "Devise\\Users\\UserServiceProvider::provides", "doc": "&quot;Get the services provided by the provider.&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users", "fromLink": "Devise/Users.html", "link": "Devise/Users/UsersRepository.html", "name": "Devise\\Users\\UsersRepository", "doc": "&quot;Class UsersRepository is used to search and retrieve DvsUser models\nand things in context of a Devise User.&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\UsersRepository", "fromLink": "Devise/Users/UsersRepository.html", "link": "Devise/Users/UsersRepository.html#method___construct", "name": "Devise\\Users\\UsersRepository::__construct", "doc": "&quot;Construct a new users repository&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersRepository", "fromLink": "Devise/Users/UsersRepository.html", "link": "Devise/Users/UsersRepository.html#method_retrieveCurrentUser", "name": "Devise\\Users\\UsersRepository::retrieveCurrentUser", "doc": "&quot;Retrieve currently logged-in user object&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersRepository", "fromLink": "Devise/Users/UsersRepository.html", "link": "Devise/Users/UsersRepository.html#method_retrieveCurrentUserId", "name": "Devise\\Users\\UsersRepository::retrieveCurrentUserId", "doc": "&quot;Retrieve current user id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersRepository", "fromLink": "Devise/Users/UsersRepository.html", "link": "Devise/Users/UsersRepository.html#method_findById", "name": "Devise\\Users\\UsersRepository::findById", "doc": "&quot;Find user by id&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersRepository", "fromLink": "Devise/Users/UsersRepository.html", "link": "Devise/Users/UsersRepository.html#method_users", "name": "Devise\\Users\\UsersRepository::users", "doc": "&quot;Paginated list of users&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersRepository", "fromLink": "Devise/Users/UsersRepository.html", "link": "Devise/Users/UsersRepository.html#method_findByEmail", "name": "Devise\\Users\\UsersRepository::findByEmail", "doc": "&quot;Find user by email field&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersRepository", "fromLink": "Devise/Users/UsersRepository.html", "link": "Devise/Users/UsersRepository.html#method_findByName", "name": "Devise\\Users\\UsersRepository::findByName", "doc": "&quot;Find user by name field&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersRepository", "fromLink": "Devise/Users/UsersRepository.html", "link": "Devise/Users/UsersRepository.html#method_findByUsername", "name": "Devise\\Users\\UsersRepository::findByUsername", "doc": "&quot;Find user by name field&quot;"},
            
            {"type": "Class", "fromName": "Devise\\Users", "fromLink": "Devise/Users.html", "link": "Devise/Users/UsersResponseHandler.html", "name": "Devise\\Users\\UsersResponseHandler", "doc": "&quot;Response handler takes care of user login\/logout, creating,\nupdating, destroying users within \/admin\/users routes&quot;"},
                                                        {"type": "Method", "fromName": "Devise\\Users\\UsersResponseHandler", "fromLink": "Devise/Users/UsersResponseHandler.html", "link": "Devise/Users/UsersResponseHandler.html#method___construct", "name": "Devise\\Users\\UsersResponseHandler::__construct", "doc": "&quot;Constructs a new UsersResponseHandler&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersResponseHandler", "fromLink": "Devise/Users/UsersResponseHandler.html", "link": "Devise/Users/UsersResponseHandler.html#method_requestLogout", "name": "Devise\\Users\\UsersResponseHandler::requestLogout", "doc": "&quot;Executes logout method in SessionsRepository&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersResponseHandler", "fromLink": "Devise/Users/UsersResponseHandler.html", "link": "Devise/Users/UsersResponseHandler.html#method_requestLogin", "name": "Devise\\Users\\UsersResponseHandler::requestLogin", "doc": "&quot;Executes login method in SessionsRepository&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersResponseHandler", "fromLink": "Devise/Users/UsersResponseHandler.html", "link": "Devise/Users/UsersResponseHandler.html#method_requestCreateUser", "name": "Devise\\Users\\UsersResponseHandler::requestCreateUser", "doc": "&quot;Request a new user be created via admin UI.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersResponseHandler", "fromLink": "Devise/Users/UsersResponseHandler.html", "link": "Devise/Users/UsersResponseHandler.html#method_requestUpdateUser", "name": "Devise\\Users\\UsersResponseHandler::requestUpdateUser", "doc": "&quot;Request user be updated with a given input&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersResponseHandler", "fromLink": "Devise/Users/UsersResponseHandler.html", "link": "Devise/Users/UsersResponseHandler.html#method_requestDestroyUser", "name": "Devise\\Users\\UsersResponseHandler::requestDestroyUser", "doc": "&quot;Request the user be deleted from database&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersResponseHandler", "fromLink": "Devise/Users/UsersResponseHandler.html", "link": "Devise/Users/UsersResponseHandler.html#method_requestRegister", "name": "Devise\\Users\\UsersResponseHandler::requestRegister", "doc": "&quot;Executes registerUser method in UserManager which\nattempt to register a new user via pulbic register form.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersResponseHandler", "fromLink": "Devise/Users/UsersResponseHandler.html", "link": "Devise/Users/UsersResponseHandler.html#method_requestActivation", "name": "Devise\\Users\\UsersResponseHandler::requestActivation", "doc": "&quot;Executes activate method in SessionsRe.&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersResponseHandler", "fromLink": "Devise/Users/UsersResponseHandler.html", "link": "Devise/Users/UsersResponseHandler.html#method_requestRecoverPassword", "name": "Devise\\Users\\UsersResponseHandler::requestRecoverPassword", "doc": "&quot;Executes recoverPassword method in SessionsRepository&quot;"},
                    {"type": "Method", "fromName": "Devise\\Users\\UsersResponseHandler", "fromLink": "Devise/Users/UsersResponseHandler.html", "link": "Devise/Users/UsersResponseHandler.html#method_requestResetPassword", "name": "Devise\\Users\\UsersResponseHandler::requestResetPassword", "doc": "&quot;Executes resetPassword method in SessionsRepository&quot;"},
            
            
                                        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    
        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    
    
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    
});


